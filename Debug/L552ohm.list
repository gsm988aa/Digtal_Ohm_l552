
L552ohm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ddc  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08001fd0  08001fd0  00011fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002020  08002020  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002020  08002020  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002020  08002020  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002020  08002020  00012020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002024  08002024  00012024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002028  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08002034  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08002034  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006c17  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000140a  00000000  00000000  00026c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000668  00000000  00000000  00028068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005c0  00000000  00000000  000286d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026149  00000000  00000000  00028c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000068e7  00000000  00000000  0004edd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2e22  00000000  00000000  000556c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001484e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017d0  00000000  00000000  00148538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000000c 	.word	0x2000000c
 8000210:	00000000 	.word	0x00000000
 8000214:	08001fb8 	.word	0x08001fb8

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000010 	.word	0x20000010
 8000230:	08001fb8 	.word	0x08001fb8

08000234 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b08a      	sub	sp, #40	; 0x28
 8000238:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800023a:	f107 0314 	add.w	r3, r7, #20
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	605a      	str	r2, [r3, #4]
 8000244:	609a      	str	r2, [r3, #8]
 8000246:	60da      	str	r2, [r3, #12]
 8000248:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800024a:	4b44      	ldr	r3, [pc, #272]	; (800035c <MX_GPIO_Init+0x128>)
 800024c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800024e:	4a43      	ldr	r2, [pc, #268]	; (800035c <MX_GPIO_Init+0x128>)
 8000250:	f043 0304 	orr.w	r3, r3, #4
 8000254:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000256:	4b41      	ldr	r3, [pc, #260]	; (800035c <MX_GPIO_Init+0x128>)
 8000258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800025a:	f003 0304 	and.w	r3, r3, #4
 800025e:	613b      	str	r3, [r7, #16]
 8000260:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000262:	4b3e      	ldr	r3, [pc, #248]	; (800035c <MX_GPIO_Init+0x128>)
 8000264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000266:	4a3d      	ldr	r2, [pc, #244]	; (800035c <MX_GPIO_Init+0x128>)
 8000268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800026c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800026e:	4b3b      	ldr	r3, [pc, #236]	; (800035c <MX_GPIO_Init+0x128>)
 8000270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000276:	60fb      	str	r3, [r7, #12]
 8000278:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800027a:	4b38      	ldr	r3, [pc, #224]	; (800035c <MX_GPIO_Init+0x128>)
 800027c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800027e:	4a37      	ldr	r2, [pc, #220]	; (800035c <MX_GPIO_Init+0x128>)
 8000280:	f043 0301 	orr.w	r3, r3, #1
 8000284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000286:	4b35      	ldr	r3, [pc, #212]	; (800035c <MX_GPIO_Init+0x128>)
 8000288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800028a:	f003 0301 	and.w	r3, r3, #1
 800028e:	60bb      	str	r3, [r7, #8]
 8000290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000292:	4b32      	ldr	r3, [pc, #200]	; (800035c <MX_GPIO_Init+0x128>)
 8000294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000296:	4a31      	ldr	r2, [pc, #196]	; (800035c <MX_GPIO_Init+0x128>)
 8000298:	f043 0302 	orr.w	r3, r3, #2
 800029c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800029e:	4b2f      	ldr	r3, [pc, #188]	; (800035c <MX_GPIO_Init+0x128>)
 80002a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002a2:	f003 0302 	and.w	r3, r3, #2
 80002a6:	607b      	str	r3, [r7, #4]
 80002a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OHM_UD2_Pin|OHM_INC2_Pin|OHM_CS_Pin, GPIO_PIN_RESET);
 80002aa:	2200      	movs	r2, #0
 80002ac:	f44f 7150 	mov.w	r1, #832	; 0x340
 80002b0:	482b      	ldr	r0, [pc, #172]	; (8000360 <MX_GPIO_Init+0x12c>)
 80002b2:	f000 fdbd 	bl	8000e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80002b6:	2200      	movs	r2, #0
 80002b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002bc:	4829      	ldr	r0, [pc, #164]	; (8000364 <MX_GPIO_Init+0x130>)
 80002be:	f000 fdb7 	bl	8000e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OHM_INC_Pin|OHM_UD_Pin, GPIO_PIN_RESET);
 80002c2:	2200      	movs	r2, #0
 80002c4:	f44f 7140 	mov.w	r1, #768	; 0x300
 80002c8:	4827      	ldr	r0, [pc, #156]	; (8000368 <MX_GPIO_Init+0x134>)
 80002ca:	f000 fdb1 	bl	8000e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80002ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002d4:	4b25      	ldr	r3, [pc, #148]	; (800036c <MX_GPIO_Init+0x138>)
 80002d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80002d8:	2302      	movs	r3, #2
 80002da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002dc:	f107 0314 	add.w	r3, r7, #20
 80002e0:	4619      	mov	r1, r3
 80002e2:	481f      	ldr	r0, [pc, #124]	; (8000360 <MX_GPIO_Init+0x12c>)
 80002e4:	f000 fc24 	bl	8000b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OHM_UD2_Pin|OHM_INC2_Pin|OHM_CS_Pin;
 80002e8:	f44f 7350 	mov.w	r3, #832	; 0x340
 80002ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ee:	2301      	movs	r3, #1
 80002f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f2:	2300      	movs	r3, #0
 80002f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f6:	2300      	movs	r3, #0
 80002f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002fa:	f107 0314 	add.w	r3, r7, #20
 80002fe:	4619      	mov	r1, r3
 8000300:	4817      	ldr	r0, [pc, #92]	; (8000360 <MX_GPIO_Init+0x12c>)
 8000302:	f000 fc15 	bl	8000b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000306:	f44f 7300 	mov.w	r3, #512	; 0x200
 800030a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800030c:	2301      	movs	r3, #1
 800030e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000310:	2300      	movs	r3, #0
 8000312:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000314:	2300      	movs	r3, #0
 8000316:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000318:	f107 0314 	add.w	r3, r7, #20
 800031c:	4619      	mov	r1, r3
 800031e:	4811      	ldr	r0, [pc, #68]	; (8000364 <MX_GPIO_Init+0x130>)
 8000320:	f000 fc06 	bl	8000b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = OHM_INC_Pin|OHM_UD_Pin;
 8000324:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800032a:	2301      	movs	r3, #1
 800032c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032e:	2300      	movs	r3, #0
 8000330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000332:	2300      	movs	r3, #0
 8000334:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000336:	f107 0314 	add.w	r3, r7, #20
 800033a:	4619      	mov	r1, r3
 800033c:	480a      	ldr	r0, [pc, #40]	; (8000368 <MX_GPIO_Init+0x134>)
 800033e:	f000 fbf7 	bl	8000b30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 2, 0);
 8000342:	2200      	movs	r2, #0
 8000344:	2102      	movs	r1, #2
 8000346:	2018      	movs	r0, #24
 8000348:	f000 fbbd 	bl	8000ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 800034c:	2018      	movs	r0, #24
 800034e:	f000 fbd4 	bl	8000afa <HAL_NVIC_EnableIRQ>

}
 8000352:	bf00      	nop
 8000354:	3728      	adds	r7, #40	; 0x28
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	40021000 	.word	0x40021000
 8000360:	42020800 	.word	0x42020800
 8000364:	42020000 	.word	0x42020000
 8000368:	42020400 	.word	0x42020400
 800036c:	10210000 	.word	0x10210000

08000370 <DelayUS>:
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
void DelayUS(unsigned int t)
{
 8000370:	b480      	push	{r7}
 8000372:	b085      	sub	sp, #20
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
unsigned int i;
for(i=0;i<t;i++) ;
 8000378:	2300      	movs	r3, #0
 800037a:	60fb      	str	r3, [r7, #12]
 800037c:	e002      	b.n	8000384 <DelayUS+0x14>
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	3301      	adds	r3, #1
 8000382:	60fb      	str	r3, [r7, #12]
 8000384:	68fa      	ldr	r2, [r7, #12]
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	429a      	cmp	r2, r3
 800038a:	d3f8      	bcc.n	800037e <DelayUS+0xe>

}
 800038c:	bf00      	nop
 800038e:	bf00      	nop
 8000390:	3714      	adds	r7, #20
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
	...

0800039c <X9C103_Inc_N_Step>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
void X9C103_Inc_N_Step(unsigned char N)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b084      	sub	sp, #16
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	4603      	mov	r3, r0
 80003a4:	71fb      	strb	r3, [r7, #7]
   unsigned char i=0;
 80003a6:	2300      	movs	r3, #0
 80003a8:	73fb      	strb	r3, [r7, #15]

        CS(0);             // CS  ����
 80003aa:	2200      	movs	r2, #0
 80003ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003b0:	4816      	ldr	r0, [pc, #88]	; (800040c <X9C103_Inc_N_Step+0x70>)
 80003b2:	f000 fd3d 	bl	8000e30 <HAL_GPIO_WritePin>
        UD(1);             // U/D ����   �������INC���أ�ִ��UP����
 80003b6:	2201      	movs	r2, #1
 80003b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003bc:	4814      	ldr	r0, [pc, #80]	; (8000410 <X9C103_Inc_N_Step+0x74>)
 80003be:	f000 fd37 	bl	8000e30 <HAL_GPIO_WritePin>
        DelayUS(3);           // ��ʱ��Լ2us
 80003c2:	2003      	movs	r0, #3
 80003c4:	f7ff ffd4 	bl	8000370 <DelayUS>
        for(i = N; i>0; i--)
 80003c8:	79fb      	ldrb	r3, [r7, #7]
 80003ca:	73fb      	strb	r3, [r7, #15]
 80003cc:	e011      	b.n	80003f2 <X9C103_Inc_N_Step+0x56>
        {
            INC(0);         // ��ΪGPIO��ʼ��ʱ��INC�Ѿ������ˡ�INC ����;  // ����һ������
 80003ce:	2200      	movs	r2, #0
 80003d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003d4:	480e      	ldr	r0, [pc, #56]	; (8000410 <X9C103_Inc_N_Step+0x74>)
 80003d6:	f000 fd2b 	bl	8000e30 <HAL_GPIO_WritePin>
            DelayUS(2);       // ��ʱ2us����
 80003da:	2002      	movs	r0, #2
 80003dc:	f7ff ffc8 	bl	8000370 <DelayUS>
            INC(1);         // ����INC //����ģʽ
 80003e0:	2201      	movs	r2, #1
 80003e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003e6:	480a      	ldr	r0, [pc, #40]	; (8000410 <X9C103_Inc_N_Step+0x74>)
 80003e8:	f000 fd22 	bl	8000e30 <HAL_GPIO_WritePin>
        for(i = N; i>0; i--)
 80003ec:	7bfb      	ldrb	r3, [r7, #15]
 80003ee:	3b01      	subs	r3, #1
 80003f0:	73fb      	strb	r3, [r7, #15]
 80003f2:	7bfb      	ldrb	r3, [r7, #15]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d1ea      	bne.n	80003ce <X9C103_Inc_N_Step+0x32>
        }
        CS(1);              // ���CS���� //store
 80003f8:	2201      	movs	r2, #1
 80003fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003fe:	4803      	ldr	r0, [pc, #12]	; (800040c <X9C103_Inc_N_Step+0x70>)
 8000400:	f000 fd16 	bl	8000e30 <HAL_GPIO_WritePin>

}
 8000404:	bf00      	nop
 8000406:	3710      	adds	r7, #16
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	42020800 	.word	0x42020800
 8000410:	42020400 	.word	0x42020400

08000414 <X9C103_Dec_N_Step>:
void X9C103_Dec_N_Step(unsigned char N)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b084      	sub	sp, #16
 8000418:	af00      	add	r7, sp, #0
 800041a:	4603      	mov	r3, r0
 800041c:	71fb      	strb	r3, [r7, #7]
   unsigned char i=0;
 800041e:	2300      	movs	r3, #0
 8000420:	73fb      	strb	r3, [r7, #15]
    UD(0);               //CLRB_X9C103_UD;   // U/D ��0��  �������INC���أ�ִ��Down����
 8000422:	2200      	movs	r2, #0
 8000424:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000428:	481b      	ldr	r0, [pc, #108]	; (8000498 <X9C103_Dec_N_Step+0x84>)
 800042a:	f000 fd01 	bl	8000e30 <HAL_GPIO_WritePin>
    DelayUS(3);            // ��ʱ��Լ2us
 800042e:	2003      	movs	r0, #3
 8000430:	f7ff ff9e 	bl	8000370 <DelayUS>
    CS(0);
 8000434:	2200      	movs	r2, #0
 8000436:	f44f 7100 	mov.w	r1, #512	; 0x200
 800043a:	4818      	ldr	r0, [pc, #96]	; (800049c <X9C103_Dec_N_Step+0x88>)
 800043c:	f000 fcf8 	bl	8000e30 <HAL_GPIO_WritePin>

   for(i=N;i>0;i--)
 8000440:	79fb      	ldrb	r3, [r7, #7]
 8000442:	73fb      	strb	r3, [r7, #15]
 8000444:	e015      	b.n	8000472 <X9C103_Dec_N_Step+0x5e>
  {
     INC(1);               // ����INC    ��ΪINC��������Ч
 8000446:	2201      	movs	r2, #1
 8000448:	f44f 7180 	mov.w	r1, #256	; 0x100
 800044c:	4812      	ldr	r0, [pc, #72]	; (8000498 <X9C103_Dec_N_Step+0x84>)
 800044e:	f000 fcef 	bl	8000e30 <HAL_GPIO_WritePin>
     DelayUS(2);              // ��ʱ2us����
 8000452:	2002      	movs	r0, #2
 8000454:	f7ff ff8c 	bl	8000370 <DelayUS>
     INC(0);                // INC ����;  // ����һ������
 8000458:	2200      	movs	r2, #0
 800045a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800045e:	480e      	ldr	r0, [pc, #56]	; (8000498 <X9C103_Dec_N_Step+0x84>)
 8000460:	f000 fce6 	bl	8000e30 <HAL_GPIO_WritePin>
     DelayUS(600);            // ��ʱ��Լ500us, Rw�ȴ�����ȶ�???
 8000464:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000468:	f7ff ff82 	bl	8000370 <DelayUS>
   for(i=N;i>0;i--)
 800046c:	7bfb      	ldrb	r3, [r7, #15]
 800046e:	3b01      	subs	r3, #1
 8000470:	73fb      	strb	r3, [r7, #15]
 8000472:	7bfb      	ldrb	r3, [r7, #15]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d1e6      	bne.n	8000446 <X9C103_Dec_N_Step+0x32>
  }
     INC(0);//����ģʽ
 8000478:	2200      	movs	r2, #0
 800047a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800047e:	4806      	ldr	r0, [pc, #24]	; (8000498 <X9C103_Dec_N_Step+0x84>)
 8000480:	f000 fcd6 	bl	8000e30 <HAL_GPIO_WritePin>
     CS(1);                 // ���CS���� // store
 8000484:	2201      	movs	r2, #1
 8000486:	f44f 7100 	mov.w	r1, #512	; 0x200
 800048a:	4804      	ldr	r0, [pc, #16]	; (800049c <X9C103_Dec_N_Step+0x88>)
 800048c:	f000 fcd0 	bl	8000e30 <HAL_GPIO_WritePin>


}
 8000490:	bf00      	nop
 8000492:	3710      	adds	r7, #16
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	42020400 	.word	0x42020400
 800049c:	42020800 	.word	0x42020800

080004a0 <X9C103_Init>:

void X9C103_Init(void)//��ʼ�����м�λ��
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
  X9C103_Dec_N_Step(99);
 80004a4:	2063      	movs	r0, #99	; 0x63
 80004a6:	f7ff ffb5 	bl	8000414 <X9C103_Dec_N_Step>
  X9C103_Inc_N_Step(79);
 80004aa:	204f      	movs	r0, #79	; 0x4f
 80004ac:	f7ff ff76 	bl	800039c <X9C103_Inc_N_Step>
}
 80004b0:	bf00      	nop
 80004b2:	bd80      	pop	{r7, pc}

080004b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b8:	f000 f9b3 	bl	8000822 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004bc:	f000 f805 	bl	80004ca <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c0:	f7ff feb8 	bl	8000234 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  X9C103_Init();
 80004c4:	f7ff ffec 	bl	80004a0 <X9C103_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004c8:	e7fe      	b.n	80004c8 <main+0x14>

080004ca <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ca:	b580      	push	{r7, lr}
 80004cc:	b098      	sub	sp, #96	; 0x60
 80004ce:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d0:	f107 0318 	add.w	r3, r7, #24
 80004d4:	2248      	movs	r2, #72	; 0x48
 80004d6:	2100      	movs	r1, #0
 80004d8:	4618      	mov	r0, r3
 80004da:	f001 fd65 	bl	8001fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	605a      	str	r2, [r3, #4]
 80004e6:	609a      	str	r2, [r3, #8]
 80004e8:	60da      	str	r2, [r3, #12]
 80004ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 80004ec:	2000      	movs	r0, #0
 80004ee:	f000 fd11 	bl	8000f14 <HAL_PWREx_ControlVoltageScaling>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <SystemClock_Config+0x32>
  {
    Error_Handler();
 80004f8:	f000 f850 	bl	800059c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80004fc:	2310      	movs	r3, #16
 80004fe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000500:	2301      	movs	r3, #1
 8000502:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000504:	2300      	movs	r3, #0
 8000506:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000508:	2360      	movs	r3, #96	; 0x60
 800050a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800050c:	2302      	movs	r3, #2
 800050e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000510:	2301      	movs	r3, #1
 8000512:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000514:	2301      	movs	r3, #1
 8000516:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8000518:	2337      	movs	r3, #55	; 0x37
 800051a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800051c:	2307      	movs	r3, #7
 800051e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000520:	2302      	movs	r3, #2
 8000522:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000524:	2302      	movs	r3, #2
 8000526:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000528:	f107 0318 	add.w	r3, r7, #24
 800052c:	4618      	mov	r0, r3
 800052e:	f000 fd81 	bl	8001034 <HAL_RCC_OscConfig>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000538:	f000 f830 	bl	800059c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800053c:	230f      	movs	r3, #15
 800053e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000540:	2303      	movs	r3, #3
 8000542:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000544:	2300      	movs	r3, #0
 8000546:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000548:	2300      	movs	r3, #0
 800054a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800054c:	2300      	movs	r3, #0
 800054e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	2105      	movs	r1, #5
 8000554:	4618      	mov	r0, r3
 8000556:	f001 fa4f 	bl	80019f8 <HAL_RCC_ClockConfig>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000560:	f000 f81c 	bl	800059c <Error_Handler>
  }
}
 8000564:	bf00      	nop
 8000566:	3760      	adds	r7, #96	; 0x60
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}

0800056c <HAL_GPIO_EXTI_Falling_Callback>:

/* USER CODE BEGIN 4 */
 void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
 {
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	80fb      	strh	r3, [r7, #6]
	 if (GPIO_Pin == GPIO_PIN_13){
 8000576:	88fb      	ldrh	r3, [r7, #6]
 8000578:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800057c:	d107      	bne.n	800058e <HAL_GPIO_EXTI_Falling_Callback+0x22>
       HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_9);
 800057e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000582:	4805      	ldr	r0, [pc, #20]	; (8000598 <HAL_GPIO_EXTI_Falling_Callback+0x2c>)
 8000584:	f000 fc6c 	bl	8000e60 <HAL_GPIO_TogglePin>
		 X9C103_Inc_N_Step(1);
 8000588:	2001      	movs	r0, #1
 800058a:	f7ff ff07 	bl	800039c <X9C103_Inc_N_Step>
	 }




 }
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	42020000 	.word	0x42020000

0800059c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a0:	b672      	cpsid	i
}
 80005a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a4:	e7fe      	b.n	80005a4 <Error_Handler+0x8>
	...

080005a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ae:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <HAL_MspInit+0x44>)
 80005b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005b2:	4a0e      	ldr	r2, [pc, #56]	; (80005ec <HAL_MspInit+0x44>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6613      	str	r3, [r2, #96]	; 0x60
 80005ba:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <HAL_MspInit+0x44>)
 80005bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <HAL_MspInit+0x44>)
 80005c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ca:	4a08      	ldr	r2, [pc, #32]	; (80005ec <HAL_MspInit+0x44>)
 80005cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d0:	6593      	str	r3, [r2, #88]	; 0x58
 80005d2:	4b06      	ldr	r3, [pc, #24]	; (80005ec <HAL_MspInit+0x44>)
 80005d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005da:	603b      	str	r3, [r7, #0]
 80005dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80005de:	f000 fcf5 	bl	8000fcc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40021000 	.word	0x40021000

080005f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <NMI_Handler+0x4>

080005f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005f6:	b480      	push	{r7}
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005fa:	e7fe      	b.n	80005fa <HardFault_Handler+0x4>

080005fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000600:	e7fe      	b.n	8000600 <MemManage_Handler+0x4>

08000602 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000606:	e7fe      	b.n	8000606 <BusFault_Handler+0x4>

08000608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800060c:	e7fe      	b.n	800060c <UsageFault_Handler+0x4>

0800060e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000612:	bf00      	nop
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr

0800061c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr

08000638 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800063c:	f000 f948 	bl	80008d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}

08000644 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000648:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800064c:	f000 fc22 	bl	8000e94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}

08000654 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <SystemInit+0x20>)
 800065a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800065e:	4a05      	ldr	r2, [pc, #20]	; (8000674 <SystemInit+0x20>)
 8000660:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000664:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000678:	b480      	push	{r7}
 800067a:	b087      	sub	sp, #28
 800067c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800067e:	4b4f      	ldr	r3, [pc, #316]	; (80007bc <SystemCoreClockUpdate+0x144>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f003 0308 	and.w	r3, r3, #8
 8000686:	2b00      	cmp	r3, #0
 8000688:	d107      	bne.n	800069a <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800068a:	4b4c      	ldr	r3, [pc, #304]	; (80007bc <SystemCoreClockUpdate+0x144>)
 800068c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000690:	0a1b      	lsrs	r3, r3, #8
 8000692:	f003 030f 	and.w	r3, r3, #15
 8000696:	617b      	str	r3, [r7, #20]
 8000698:	e005      	b.n	80006a6 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800069a:	4b48      	ldr	r3, [pc, #288]	; (80007bc <SystemCoreClockUpdate+0x144>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	091b      	lsrs	r3, r3, #4
 80006a0:	f003 030f 	and.w	r3, r3, #15
 80006a4:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80006a6:	4a46      	ldr	r2, [pc, #280]	; (80007c0 <SystemCoreClockUpdate+0x148>)
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ae:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80006b0:	4b42      	ldr	r3, [pc, #264]	; (80007bc <SystemCoreClockUpdate+0x144>)
 80006b2:	689b      	ldr	r3, [r3, #8]
 80006b4:	f003 030c 	and.w	r3, r3, #12
 80006b8:	2b0c      	cmp	r3, #12
 80006ba:	d866      	bhi.n	800078a <SystemCoreClockUpdate+0x112>
 80006bc:	a201      	add	r2, pc, #4	; (adr r2, 80006c4 <SystemCoreClockUpdate+0x4c>)
 80006be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006c2:	bf00      	nop
 80006c4:	080006f9 	.word	0x080006f9
 80006c8:	0800078b 	.word	0x0800078b
 80006cc:	0800078b 	.word	0x0800078b
 80006d0:	0800078b 	.word	0x0800078b
 80006d4:	08000701 	.word	0x08000701
 80006d8:	0800078b 	.word	0x0800078b
 80006dc:	0800078b 	.word	0x0800078b
 80006e0:	0800078b 	.word	0x0800078b
 80006e4:	08000709 	.word	0x08000709
 80006e8:	0800078b 	.word	0x0800078b
 80006ec:	0800078b 	.word	0x0800078b
 80006f0:	0800078b 	.word	0x0800078b
 80006f4:	08000711 	.word	0x08000711
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80006f8:	4a32      	ldr	r2, [pc, #200]	; (80007c4 <SystemCoreClockUpdate+0x14c>)
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	6013      	str	r3, [r2, #0]
      break;
 80006fe:	e048      	b.n	8000792 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000700:	4b30      	ldr	r3, [pc, #192]	; (80007c4 <SystemCoreClockUpdate+0x14c>)
 8000702:	4a31      	ldr	r2, [pc, #196]	; (80007c8 <SystemCoreClockUpdate+0x150>)
 8000704:	601a      	str	r2, [r3, #0]
      break;
 8000706:	e044      	b.n	8000792 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000708:	4b2e      	ldr	r3, [pc, #184]	; (80007c4 <SystemCoreClockUpdate+0x14c>)
 800070a:	4a2f      	ldr	r2, [pc, #188]	; (80007c8 <SystemCoreClockUpdate+0x150>)
 800070c:	601a      	str	r2, [r3, #0]
      break;
 800070e:	e040      	b.n	8000792 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000710:	4b2a      	ldr	r3, [pc, #168]	; (80007bc <SystemCoreClockUpdate+0x144>)
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	f003 0303 	and.w	r3, r3, #3
 8000718:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 800071a:	4b28      	ldr	r3, [pc, #160]	; (80007bc <SystemCoreClockUpdate+0x144>)
 800071c:	68db      	ldr	r3, [r3, #12]
 800071e:	091b      	lsrs	r3, r3, #4
 8000720:	f003 030f 	and.w	r3, r3, #15
 8000724:	3301      	adds	r3, #1
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	2b02      	cmp	r3, #2
 800072c:	d003      	beq.n	8000736 <SystemCoreClockUpdate+0xbe>
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	2b03      	cmp	r3, #3
 8000732:	d006      	beq.n	8000742 <SystemCoreClockUpdate+0xca>
 8000734:	e00b      	b.n	800074e <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8000736:	4a24      	ldr	r2, [pc, #144]	; (80007c8 <SystemCoreClockUpdate+0x150>)
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	fbb2 f3f3 	udiv	r3, r2, r3
 800073e:	613b      	str	r3, [r7, #16]
          break;
 8000740:	e00b      	b.n	800075a <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8000742:	4a21      	ldr	r2, [pc, #132]	; (80007c8 <SystemCoreClockUpdate+0x150>)
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	fbb2 f3f3 	udiv	r3, r2, r3
 800074a:	613b      	str	r3, [r7, #16]
          break;
 800074c:	e005      	b.n	800075a <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800074e:	697a      	ldr	r2, [r7, #20]
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	fbb2 f3f3 	udiv	r3, r2, r3
 8000756:	613b      	str	r3, [r7, #16]
          break;
 8000758:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800075a:	4b18      	ldr	r3, [pc, #96]	; (80007bc <SystemCoreClockUpdate+0x144>)
 800075c:	68db      	ldr	r3, [r3, #12]
 800075e:	0a1b      	lsrs	r3, r3, #8
 8000760:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000764:	693b      	ldr	r3, [r7, #16]
 8000766:	fb02 f303 	mul.w	r3, r2, r3
 800076a:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 800076c:	4b13      	ldr	r3, [pc, #76]	; (80007bc <SystemCoreClockUpdate+0x144>)
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	0e5b      	lsrs	r3, r3, #25
 8000772:	f003 0303 	and.w	r3, r3, #3
 8000776:	3301      	adds	r3, #1
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 800077c:	693a      	ldr	r2, [r7, #16]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	fbb2 f3f3 	udiv	r3, r2, r3
 8000784:	4a0f      	ldr	r2, [pc, #60]	; (80007c4 <SystemCoreClockUpdate+0x14c>)
 8000786:	6013      	str	r3, [r2, #0]
      break;
 8000788:	e003      	b.n	8000792 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800078a:	4a0e      	ldr	r2, [pc, #56]	; (80007c4 <SystemCoreClockUpdate+0x14c>)
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	6013      	str	r3, [r2, #0]
      break;
 8000790:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000792:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <SystemCoreClockUpdate+0x144>)
 8000794:	689b      	ldr	r3, [r3, #8]
 8000796:	091b      	lsrs	r3, r3, #4
 8000798:	f003 030f 	and.w	r3, r3, #15
 800079c:	4a0b      	ldr	r2, [pc, #44]	; (80007cc <SystemCoreClockUpdate+0x154>)
 800079e:	5cd3      	ldrb	r3, [r2, r3]
 80007a0:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <SystemCoreClockUpdate+0x14c>)
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	fa22 f303 	lsr.w	r3, r2, r3
 80007ac:	4a05      	ldr	r2, [pc, #20]	; (80007c4 <SystemCoreClockUpdate+0x14c>)
 80007ae:	6013      	str	r3, [r2, #0]
}
 80007b0:	bf00      	nop
 80007b2:	371c      	adds	r7, #28
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	40021000 	.word	0x40021000
 80007c0:	08001fe0 	.word	0x08001fe0
 80007c4:	20000000 	.word	0x20000000
 80007c8:	00f42400 	.word	0x00f42400
 80007cc:	08001fd0 	.word	0x08001fd0

080007d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80007d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000808 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007d4:	f7ff ff3e 	bl	8000654 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80007d8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80007da:	e003      	b.n	80007e4 <LoopCopyDataInit>

080007dc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80007dc:	4b0b      	ldr	r3, [pc, #44]	; (800080c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80007de:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80007e0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80007e2:	3104      	adds	r1, #4

080007e4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80007e4:	480a      	ldr	r0, [pc, #40]	; (8000810 <LoopForever+0xa>)
	ldr	r3, =_edata
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <LoopForever+0xe>)
	adds	r2, r0, r1
 80007e8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80007ea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80007ec:	d3f6      	bcc.n	80007dc <CopyDataInit>
	ldr	r2, =_sbss
 80007ee:	4a0a      	ldr	r2, [pc, #40]	; (8000818 <LoopForever+0x12>)
	b	LoopFillZerobss
 80007f0:	e002      	b.n	80007f8 <LoopFillZerobss>

080007f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80007f2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80007f4:	f842 3b04 	str.w	r3, [r2], #4

080007f8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80007f8:	4b08      	ldr	r3, [pc, #32]	; (800081c <LoopForever+0x16>)
	cmp	r2, r3
 80007fa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80007fc:	d3f9      	bcc.n	80007f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007fe:	f001 fbaf 	bl	8001f60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000802:	f7ff fe57 	bl	80004b4 <main>

08000806 <LoopForever>:

LoopForever:
    b LoopForever
 8000806:	e7fe      	b.n	8000806 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000808:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 800080c:	08002028 	.word	0x08002028
	ldr	r0, =_sdata
 8000810:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000814:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000818:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800081c:	2000002c 	.word	0x2000002c

08000820 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000820:	e7fe      	b.n	8000820 <ADC1_2_IRQHandler>

08000822 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b082      	sub	sp, #8
 8000826:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000828:	2300      	movs	r3, #0
 800082a:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800082c:	2004      	movs	r0, #4
 800082e:	f000 f93f 	bl	8000ab0 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8000832:	f7ff ff21 	bl	8000678 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000836:	2000      	movs	r0, #0
 8000838:	f000 f80e 	bl	8000858 <HAL_InitTick>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d002      	beq.n	8000848 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8000842:	2301      	movs	r3, #1
 8000844:	71fb      	strb	r3, [r7, #7]
 8000846:	e001      	b.n	800084c <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000848:	f7ff feae 	bl	80005a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800084c:	79fb      	ldrb	r3, [r7, #7]
}
 800084e:	4618      	mov	r0, r3
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000860:	2300      	movs	r3, #0
 8000862:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000864:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <HAL_InitTick+0x6c>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d023      	beq.n	80008b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800086c:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <HAL_InitTick+0x70>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <HAL_InitTick+0x6c>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	4619      	mov	r1, r3
 8000876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800087a:	fbb3 f3f1 	udiv	r3, r3, r1
 800087e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000882:	4618      	mov	r0, r3
 8000884:	f000 f947 	bl	8000b16 <HAL_SYSTICK_Config>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d10f      	bne.n	80008ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2b07      	cmp	r3, #7
 8000892:	d809      	bhi.n	80008a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000894:	2200      	movs	r2, #0
 8000896:	6879      	ldr	r1, [r7, #4]
 8000898:	f04f 30ff 	mov.w	r0, #4294967295
 800089c:	f000 f913 	bl	8000ac6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008a0:	4a0a      	ldr	r2, [pc, #40]	; (80008cc <HAL_InitTick+0x74>)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	6013      	str	r3, [r2, #0]
 80008a6:	e007      	b.n	80008b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80008a8:	2301      	movs	r3, #1
 80008aa:	73fb      	strb	r3, [r7, #15]
 80008ac:	e004      	b.n	80008b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
 80008b0:	73fb      	strb	r3, [r7, #15]
 80008b2:	e001      	b.n	80008b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008b4:	2301      	movs	r3, #1
 80008b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3710      	adds	r7, #16
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000008 	.word	0x20000008
 80008c8:	20000000 	.word	0x20000000
 80008cc:	20000004 	.word	0x20000004

080008d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <HAL_IncTick+0x20>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	461a      	mov	r2, r3
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <HAL_IncTick+0x24>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4413      	add	r3, r2
 80008e0:	4a04      	ldr	r2, [pc, #16]	; (80008f4 <HAL_IncTick+0x24>)
 80008e2:	6013      	str	r3, [r2, #0]
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	20000008 	.word	0x20000008
 80008f4:	20000028 	.word	0x20000028

080008f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  return uwTick;
 80008fc:	4b03      	ldr	r3, [pc, #12]	; (800090c <HAL_GetTick+0x14>)
 80008fe:	681b      	ldr	r3, [r3, #0]
}
 8000900:	4618      	mov	r0, r3
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	20000028 	.word	0x20000028

08000910 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f003 0307 	and.w	r3, r3, #7
 800091e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <__NVIC_SetPriorityGrouping+0x44>)
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000926:	68ba      	ldr	r2, [r7, #8]
 8000928:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800092c:	4013      	ands	r3, r2
 800092e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000938:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800093c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000942:	4a04      	ldr	r2, [pc, #16]	; (8000954 <__NVIC_SetPriorityGrouping+0x44>)
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	60d3      	str	r3, [r2, #12]
}
 8000948:	bf00      	nop
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800095c:	4b04      	ldr	r3, [pc, #16]	; (8000970 <__NVIC_GetPriorityGrouping+0x18>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	0a1b      	lsrs	r3, r3, #8
 8000962:	f003 0307 	and.w	r3, r3, #7
}
 8000966:	4618      	mov	r0, r3
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800097e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000982:	2b00      	cmp	r3, #0
 8000984:	db0b      	blt.n	800099e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	f003 021f 	and.w	r2, r3, #31
 800098c:	4907      	ldr	r1, [pc, #28]	; (80009ac <__NVIC_EnableIRQ+0x38>)
 800098e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000992:	095b      	lsrs	r3, r3, #5
 8000994:	2001      	movs	r0, #1
 8000996:	fa00 f202 	lsl.w	r2, r0, r2
 800099a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	e000e100 	.word	0xe000e100

080009b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	6039      	str	r1, [r7, #0]
 80009ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	db0a      	blt.n	80009da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	490c      	ldr	r1, [pc, #48]	; (80009fc <__NVIC_SetPriority+0x4c>)
 80009ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ce:	0152      	lsls	r2, r2, #5
 80009d0:	b2d2      	uxtb	r2, r2
 80009d2:	440b      	add	r3, r1
 80009d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009d8:	e00a      	b.n	80009f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	4908      	ldr	r1, [pc, #32]	; (8000a00 <__NVIC_SetPriority+0x50>)
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	f003 030f 	and.w	r3, r3, #15
 80009e6:	3b04      	subs	r3, #4
 80009e8:	0152      	lsls	r2, r2, #5
 80009ea:	b2d2      	uxtb	r2, r2
 80009ec:	440b      	add	r3, r1
 80009ee:	761a      	strb	r2, [r3, #24]
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	e000e100 	.word	0xe000e100
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b089      	sub	sp, #36	; 0x24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	f003 0307 	and.w	r3, r3, #7
 8000a16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a18:	69fb      	ldr	r3, [r7, #28]
 8000a1a:	f1c3 0307 	rsb	r3, r3, #7
 8000a1e:	2b03      	cmp	r3, #3
 8000a20:	bf28      	it	cs
 8000a22:	2303      	movcs	r3, #3
 8000a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	3303      	adds	r3, #3
 8000a2a:	2b06      	cmp	r3, #6
 8000a2c:	d902      	bls.n	8000a34 <NVIC_EncodePriority+0x30>
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	3b04      	subs	r3, #4
 8000a32:	e000      	b.n	8000a36 <NVIC_EncodePriority+0x32>
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a38:	f04f 32ff 	mov.w	r2, #4294967295
 8000a3c:	69bb      	ldr	r3, [r7, #24]
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	43da      	mvns	r2, r3
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	401a      	ands	r2, r3
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	fa01 f303 	lsl.w	r3, r1, r3
 8000a56:	43d9      	mvns	r1, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a5c:	4313      	orrs	r3, r2
         );
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3724      	adds	r7, #36	; 0x24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
	...

08000a6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a7c:	d301      	bcc.n	8000a82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e00f      	b.n	8000aa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a82:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <SysTick_Config+0x40>)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3b01      	subs	r3, #1
 8000a88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a8a:	2107      	movs	r1, #7
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a90:	f7ff ff8e 	bl	80009b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <SysTick_Config+0x40>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a9a:	4b04      	ldr	r3, [pc, #16]	; (8000aac <SysTick_Config+0x40>)
 8000a9c:	2207      	movs	r2, #7
 8000a9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	e000e010 	.word	0xe000e010

08000ab0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff ff29 	bl	8000910 <__NVIC_SetPriorityGrouping>
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b086      	sub	sp, #24
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	4603      	mov	r3, r0
 8000ace:	60b9      	str	r1, [r7, #8]
 8000ad0:	607a      	str	r2, [r7, #4]
 8000ad2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ad4:	f7ff ff40 	bl	8000958 <__NVIC_GetPriorityGrouping>
 8000ad8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	68b9      	ldr	r1, [r7, #8]
 8000ade:	6978      	ldr	r0, [r7, #20]
 8000ae0:	f7ff ff90 	bl	8000a04 <NVIC_EncodePriority>
 8000ae4:	4602      	mov	r2, r0
 8000ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aea:	4611      	mov	r1, r2
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ff5f 	bl	80009b0 <__NVIC_SetPriority>
}
 8000af2:	bf00      	nop
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b082      	sub	sp, #8
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	4603      	mov	r3, r0
 8000b02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff ff33 	bl	8000974 <__NVIC_EnableIRQ>
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b082      	sub	sp, #8
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f7ff ffa4 	bl	8000a6c <SysTick_Config>
 8000b24:	4603      	mov	r3, r0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b087      	sub	sp, #28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000b3e:	e158      	b.n	8000df2 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	2101      	movs	r1, #1
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	f000 814a 	beq.w	8000dec <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d00b      	beq.n	8000b78 <HAL_GPIO_Init+0x48>
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	2b02      	cmp	r3, #2
 8000b66:	d007      	beq.n	8000b78 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b6c:	2b11      	cmp	r3, #17
 8000b6e:	d003      	beq.n	8000b78 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	2b12      	cmp	r3, #18
 8000b76:	d130      	bne.n	8000bda <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	689b      	ldr	r3, [r3, #8]
 8000b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	2203      	movs	r2, #3
 8000b84:	fa02 f303 	lsl.w	r3, r2, r3
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	68da      	ldr	r2, [r3, #12]
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bae:	2201      	movs	r2, #1
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	091b      	lsrs	r3, r3, #4
 8000bc4:	f003 0201 	and.w	r2, r3, #1
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	68db      	ldr	r3, [r3, #12]
 8000bde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	2203      	movs	r2, #3
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	43db      	mvns	r3, r3
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	689a      	ldr	r2, [r3, #8]
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d003      	beq.n	8000c1a <HAL_GPIO_Init+0xea>
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	2b12      	cmp	r3, #18
 8000c18:	d123      	bne.n	8000c62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	08da      	lsrs	r2, r3, #3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	3208      	adds	r2, #8
 8000c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c26:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	220f      	movs	r2, #15
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43db      	mvns	r3, r3
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	691a      	ldr	r2, [r3, #16]
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	f003 0307 	and.w	r3, r3, #7
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	08da      	lsrs	r2, r3, #3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3208      	adds	r2, #8
 8000c5c:	6939      	ldr	r1, [r7, #16]
 8000c5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	2203      	movs	r2, #3
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43db      	mvns	r3, r3
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	4013      	ands	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f003 0203 	and.w	r2, r3, #3
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	f000 80a4 	beq.w	8000dec <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8000ca4:	4a5a      	ldr	r2, [pc, #360]	; (8000e10 <HAL_GPIO_Init+0x2e0>)
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	089b      	lsrs	r3, r3, #2
 8000caa:	3318      	adds	r3, #24
 8000cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb0:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	f003 0303 	and.w	r3, r3, #3
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	220f      	movs	r2, #15
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a52      	ldr	r2, [pc, #328]	; (8000e14 <HAL_GPIO_Init+0x2e4>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d025      	beq.n	8000d1c <HAL_GPIO_Init+0x1ec>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a51      	ldr	r2, [pc, #324]	; (8000e18 <HAL_GPIO_Init+0x2e8>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d01f      	beq.n	8000d18 <HAL_GPIO_Init+0x1e8>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a50      	ldr	r2, [pc, #320]	; (8000e1c <HAL_GPIO_Init+0x2ec>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d019      	beq.n	8000d14 <HAL_GPIO_Init+0x1e4>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a4f      	ldr	r2, [pc, #316]	; (8000e20 <HAL_GPIO_Init+0x2f0>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d013      	beq.n	8000d10 <HAL_GPIO_Init+0x1e0>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a4e      	ldr	r2, [pc, #312]	; (8000e24 <HAL_GPIO_Init+0x2f4>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d00d      	beq.n	8000d0c <HAL_GPIO_Init+0x1dc>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a4d      	ldr	r2, [pc, #308]	; (8000e28 <HAL_GPIO_Init+0x2f8>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d007      	beq.n	8000d08 <HAL_GPIO_Init+0x1d8>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a4c      	ldr	r2, [pc, #304]	; (8000e2c <HAL_GPIO_Init+0x2fc>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d101      	bne.n	8000d04 <HAL_GPIO_Init+0x1d4>
 8000d00:	2306      	movs	r3, #6
 8000d02:	e00c      	b.n	8000d1e <HAL_GPIO_Init+0x1ee>
 8000d04:	2307      	movs	r3, #7
 8000d06:	e00a      	b.n	8000d1e <HAL_GPIO_Init+0x1ee>
 8000d08:	2305      	movs	r3, #5
 8000d0a:	e008      	b.n	8000d1e <HAL_GPIO_Init+0x1ee>
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	e006      	b.n	8000d1e <HAL_GPIO_Init+0x1ee>
 8000d10:	2303      	movs	r3, #3
 8000d12:	e004      	b.n	8000d1e <HAL_GPIO_Init+0x1ee>
 8000d14:	2302      	movs	r3, #2
 8000d16:	e002      	b.n	8000d1e <HAL_GPIO_Init+0x1ee>
 8000d18:	2301      	movs	r3, #1
 8000d1a:	e000      	b.n	8000d1e <HAL_GPIO_Init+0x1ee>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	697a      	ldr	r2, [r7, #20]
 8000d20:	f002 0203 	and.w	r2, r2, #3
 8000d24:	00d2      	lsls	r2, r2, #3
 8000d26:	4093      	lsls	r3, r2
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8000d2e:	4938      	ldr	r1, [pc, #224]	; (8000e10 <HAL_GPIO_Init+0x2e0>)
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	089b      	lsrs	r3, r3, #2
 8000d34:	3318      	adds	r3, #24
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000d3c:	4b34      	ldr	r3, [pc, #208]	; (8000e10 <HAL_GPIO_Init+0x2e0>)
 8000d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	43db      	mvns	r3, r3
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d003      	beq.n	8000d62 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d62:	4a2b      	ldr	r2, [pc, #172]	; (8000e10 <HAL_GPIO_Init+0x2e0>)
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000d6a:	4b29      	ldr	r3, [pc, #164]	; (8000e10 <HAL_GPIO_Init+0x2e0>)
 8000d6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000d70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	43db      	mvns	r3, r3
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d003      	beq.n	8000d90 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d90:	4a1f      	ldr	r2, [pc, #124]	; (8000e10 <HAL_GPIO_Init+0x2e0>)
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d98:	4b1d      	ldr	r3, [pc, #116]	; (8000e10 <HAL_GPIO_Init+0x2e0>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	43db      	mvns	r3, r3
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4013      	ands	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d003      	beq.n	8000dbc <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000dbc:	4a14      	ldr	r2, [pc, #80]	; (8000e10 <HAL_GPIO_Init+0x2e0>)
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000dc2:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <HAL_GPIO_Init+0x2e0>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d003      	beq.n	8000de6 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000de6:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <HAL_GPIO_Init+0x2e0>)
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	3301      	adds	r3, #1
 8000df0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	fa22 f303 	lsr.w	r3, r2, r3
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	f47f ae9f 	bne.w	8000b40 <HAL_GPIO_Init+0x10>
  }
}
 8000e02:	bf00      	nop
 8000e04:	bf00      	nop
 8000e06:	371c      	adds	r7, #28
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	4002f400 	.word	0x4002f400
 8000e14:	42020000 	.word	0x42020000
 8000e18:	42020400 	.word	0x42020400
 8000e1c:	42020800 	.word	0x42020800
 8000e20:	42020c00 	.word	0x42020c00
 8000e24:	42021000 	.word	0x42021000
 8000e28:	42021400 	.word	0x42021400
 8000e2c:	42021800 	.word	0x42021800

08000e30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	807b      	strh	r3, [r7, #2]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e40:	787b      	ldrb	r3, [r7, #1]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d003      	beq.n	8000e4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e46:	887a      	ldrh	r2, [r7, #2]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e4c:	e002      	b.n	8000e54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e4e:	887a      	ldrh	r2, [r7, #2]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	460b      	mov	r3, r1
 8000e6a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	695b      	ldr	r3, [r3, #20]
 8000e70:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e72:	887a      	ldrh	r2, [r7, #2]
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4013      	ands	r3, r2
 8000e78:	041a      	lsls	r2, r3, #16
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	43d9      	mvns	r1, r3
 8000e7e:	887b      	ldrh	r3, [r7, #2]
 8000e80:	400b      	ands	r3, r1
 8000e82:	431a      	orrs	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	619a      	str	r2, [r3, #24]
}
 8000e88:	bf00      	nop
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8000ea0:	68da      	ldr	r2, [r3, #12]
 8000ea2:	88fb      	ldrh	r3, [r7, #6]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d006      	beq.n	8000eb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8000eaa:	4a0c      	ldr	r2, [pc, #48]	; (8000edc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8000eac:	88fb      	ldrh	r3, [r7, #6]
 8000eae:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8000eb0:	88fb      	ldrh	r3, [r7, #6]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f814 	bl	8000ee0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if(__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8000eba:	691a      	ldr	r2, [r3, #16]
 8000ebc:	88fb      	ldrh	r3, [r7, #6]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d006      	beq.n	8000ed2 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8000ec4:	4a05      	ldr	r2, [pc, #20]	; (8000edc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8000eca:	88fb      	ldrh	r3, [r7, #6]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fb4d 	bl	800056c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	4002f400 	.word	0x4002f400

08000ee0 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
	...

08000ef8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <HAL_PWREx_GetVoltageRange+0x18>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	40007000 	.word	0x40007000

08000f14 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8000f1c:	4b27      	ldr	r3, [pc, #156]	; (8000fbc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f24:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8000f26:	f000 f861 	bl	8000fec <HAL_PWREx_SMPS_GetEffectiveMode>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f30:	d101      	bne.n	8000f36 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e03e      	b.n	8000fb4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8000f36:	4b21      	ldr	r3, [pc, #132]	; (8000fbc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f42:	d101      	bne.n	8000f48 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e035      	b.n	8000fb4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8000f48:	68ba      	ldr	r2, [r7, #8]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d101      	bne.n	8000f54 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8000f50:	2300      	movs	r3, #0
 8000f52:	e02f      	b.n	8000fb4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000f54:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8000f5c:	4917      	ldr	r1, [pc, #92]	; (8000fbc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8000f64:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	095b      	lsrs	r3, r3, #5
 8000f6a:	4a16      	ldr	r2, [pc, #88]	; (8000fc4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8000f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f70:	09db      	lsrs	r3, r3, #7
 8000f72:	2232      	movs	r2, #50	; 0x32
 8000f74:	fb02 f303 	mul.w	r3, r2, r3
 8000f78:	4a13      	ldr	r2, [pc, #76]	; (8000fc8 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8000f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f7e:	08db      	lsrs	r3, r3, #3
 8000f80:	3301      	adds	r3, #1
 8000f82:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f84:	e002      	b.n	8000f8c <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f8e:	695b      	ldr	r3, [r3, #20]
 8000f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f98:	d102      	bne.n	8000fa0 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1f2      	bne.n	8000f86 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000fa2:	695b      	ldr	r3, [r3, #20]
 8000fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fac:	d101      	bne.n	8000fb2 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e000      	b.n	8000fb4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40007000 	.word	0x40007000
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	0a7c5ac5 	.word	0x0a7c5ac5
 8000fc8:	cccccccd 	.word	0xcccccccd

08000fcc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000fd0:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000fd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fda:	6093      	str	r3, [r2, #8]
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	40007000 	.word	0x40007000

08000fec <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8000ff4:	691b      	ldr	r3, [r3, #16]
 8000ff6:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8001002:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	e00a      	b.n	8001020 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d103      	bne.n	800101c <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8001014:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	e001      	b.n	8001020 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 800101c:	2300      	movs	r3, #0
 800101e:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8001020:	687b      	ldr	r3, [r7, #4]
}
 8001022:	4618      	mov	r0, r3
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	40007000 	.word	0x40007000

08001034 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b088      	sub	sp, #32
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d102      	bne.n	8001048 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	f000 bcd0 	b.w	80019e8 <HAL_RCC_OscConfig+0x9b4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001048:	4ba3      	ldr	r3, [pc, #652]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	f003 030c 	and.w	r3, r3, #12
 8001050:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001052:	4ba1      	ldr	r3, [pc, #644]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	f003 0303 	and.w	r3, r3, #3
 800105a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0310 	and.w	r3, r3, #16
 8001064:	2b00      	cmp	r3, #0
 8001066:	f000 80e9 	beq.w	800123c <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d006      	beq.n	800107e <HAL_RCC_OscConfig+0x4a>
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	2b0c      	cmp	r3, #12
 8001074:	f040 8083 	bne.w	800117e <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d17f      	bne.n	800117e <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800107e:	4b96      	ldr	r3, [pc, #600]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d006      	beq.n	8001098 <HAL_RCC_OscConfig+0x64>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d102      	bne.n	8001098 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	f000 bca8 	b.w	80019e8 <HAL_RCC_OscConfig+0x9b4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800109c:	4b8e      	ldr	r3, [pc, #568]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0308 	and.w	r3, r3, #8
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d004      	beq.n	80010b2 <HAL_RCC_OscConfig+0x7e>
 80010a8:	4b8b      	ldr	r3, [pc, #556]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010b0:	e005      	b.n	80010be <HAL_RCC_OscConfig+0x8a>
 80010b2:	4b89      	ldr	r3, [pc, #548]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 80010b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010b8:	091b      	lsrs	r3, r3, #4
 80010ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010be:	4293      	cmp	r3, r2
 80010c0:	d224      	bcs.n	800110c <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 fe6e 	bl	8001da8 <RCC_SetFlashLatencyFromMSIRange>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d002      	beq.n	80010d8 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	f000 bc88 	b.w	80019e8 <HAL_RCC_OscConfig+0x9b4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010d8:	4b7f      	ldr	r3, [pc, #508]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a7e      	ldr	r2, [pc, #504]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 80010de:	f043 0308 	orr.w	r3, r3, #8
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	4b7c      	ldr	r3, [pc, #496]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f0:	4979      	ldr	r1, [pc, #484]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 80010f2:	4313      	orrs	r3, r2
 80010f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010f6:	4b78      	ldr	r3, [pc, #480]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a1b      	ldr	r3, [r3, #32]
 8001102:	021b      	lsls	r3, r3, #8
 8001104:	4974      	ldr	r1, [pc, #464]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 8001106:	4313      	orrs	r3, r2
 8001108:	604b      	str	r3, [r1, #4]
 800110a:	e026      	b.n	800115a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800110c:	4b72      	ldr	r3, [pc, #456]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a71      	ldr	r2, [pc, #452]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 8001112:	f043 0308 	orr.w	r3, r3, #8
 8001116:	6013      	str	r3, [r2, #0]
 8001118:	4b6f      	ldr	r3, [pc, #444]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001124:	496c      	ldr	r1, [pc, #432]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 8001126:	4313      	orrs	r3, r2
 8001128:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800112a:	4b6b      	ldr	r3, [pc, #428]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a1b      	ldr	r3, [r3, #32]
 8001136:	021b      	lsls	r3, r3, #8
 8001138:	4967      	ldr	r1, [pc, #412]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 800113a:	4313      	orrs	r3, r2
 800113c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d10a      	bne.n	800115a <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001148:	4618      	mov	r0, r3
 800114a:	f000 fe2d 	bl	8001da8 <RCC_SetFlashLatencyFromMSIRange>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d002      	beq.n	800115a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	f000 bc47 	b.w	80019e8 <HAL_RCC_OscConfig+0x9b4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800115a:	f000 fe11 	bl	8001d80 <HAL_RCC_GetHCLKFreq>
 800115e:	4603      	mov	r3, r0
 8001160:	4a5e      	ldr	r2, [pc, #376]	; (80012dc <HAL_RCC_OscConfig+0x2a8>)
 8001162:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001164:	4b5e      	ldr	r3, [pc, #376]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fb75 	bl	8000858 <HAL_InitTick>
 800116e:	4603      	mov	r3, r0
 8001170:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8001172:	7bfb      	ldrb	r3, [r7, #15]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d060      	beq.n	800123a <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	f000 bc35 	b.w	80019e8 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d039      	beq.n	80011fa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001186:	4b54      	ldr	r3, [pc, #336]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a53      	ldr	r2, [pc, #332]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001192:	f7ff fbb1 	bl	80008f8 <HAL_GetTick>
 8001196:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001198:	e00f      	b.n	80011ba <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800119a:	f7ff fbad 	bl	80008f8 <HAL_GetTick>
 800119e:	4602      	mov	r2, r0
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d908      	bls.n	80011ba <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011a8:	4b4b      	ldr	r3, [pc, #300]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d102      	bne.n	80011ba <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	f000 bc17 	b.w	80019e8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011ba:	4b47      	ldr	r3, [pc, #284]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d0e9      	beq.n	800119a <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011c6:	4b44      	ldr	r3, [pc, #272]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a43      	ldr	r2, [pc, #268]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 80011cc:	f043 0308 	orr.w	r3, r3, #8
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	4b41      	ldr	r3, [pc, #260]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011de:	493e      	ldr	r1, [pc, #248]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 80011e0:	4313      	orrs	r3, r2
 80011e2:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011e4:	4b3c      	ldr	r3, [pc, #240]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a1b      	ldr	r3, [r3, #32]
 80011f0:	021b      	lsls	r3, r3, #8
 80011f2:	4939      	ldr	r1, [pc, #228]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 80011f4:	4313      	orrs	r3, r2
 80011f6:	604b      	str	r3, [r1, #4]
 80011f8:	e020      	b.n	800123c <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011fa:	4b37      	ldr	r3, [pc, #220]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a36      	ldr	r2, [pc, #216]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 8001200:	f023 0301 	bic.w	r3, r3, #1
 8001204:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001206:	f7ff fb77 	bl	80008f8 <HAL_GetTick>
 800120a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800120c:	e00e      	b.n	800122c <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800120e:	f7ff fb73 	bl	80008f8 <HAL_GetTick>
 8001212:	4602      	mov	r2, r0
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	2b02      	cmp	r3, #2
 800121a:	d907      	bls.n	800122c <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800121c:	4b2e      	ldr	r3, [pc, #184]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e3dd      	b.n	80019e8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800122c:	4b2a      	ldr	r3, [pc, #168]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1ea      	bne.n	800120e <HAL_RCC_OscConfig+0x1da>
 8001238:	e000      	b.n	800123c <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800123a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	2b00      	cmp	r3, #0
 8001246:	d07e      	beq.n	8001346 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	2b08      	cmp	r3, #8
 800124c:	d005      	beq.n	800125a <HAL_RCC_OscConfig+0x226>
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	2b0c      	cmp	r3, #12
 8001252:	d10e      	bne.n	8001272 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	2b03      	cmp	r3, #3
 8001258:	d10b      	bne.n	8001272 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800125a:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d06e      	beq.n	8001344 <HAL_RCC_OscConfig+0x310>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d16a      	bne.n	8001344 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e3ba      	b.n	80019e8 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800127a:	d106      	bne.n	800128a <HAL_RCC_OscConfig+0x256>
 800127c:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a15      	ldr	r2, [pc, #84]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 8001282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	e01d      	b.n	80012c6 <HAL_RCC_OscConfig+0x292>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001292:	d10c      	bne.n	80012ae <HAL_RCC_OscConfig+0x27a>
 8001294:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a0f      	ldr	r2, [pc, #60]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 800129a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	4b0d      	ldr	r3, [pc, #52]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a0c      	ldr	r2, [pc, #48]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 80012a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012aa:	6013      	str	r3, [r2, #0]
 80012ac:	e00b      	b.n	80012c6 <HAL_RCC_OscConfig+0x292>
 80012ae:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a09      	ldr	r2, [pc, #36]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 80012b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012b8:	6013      	str	r3, [r2, #0]
 80012ba:	4b07      	ldr	r3, [pc, #28]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a06      	ldr	r2, [pc, #24]	; (80012d8 <HAL_RCC_OscConfig+0x2a4>)
 80012c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012c4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d020      	beq.n	8001310 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ce:	f7ff fb13 	bl	80008f8 <HAL_GetTick>
 80012d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012d4:	e015      	b.n	8001302 <HAL_RCC_OscConfig+0x2ce>
 80012d6:	bf00      	nop
 80012d8:	40021000 	.word	0x40021000
 80012dc:	20000000 	.word	0x20000000
 80012e0:	20000004 	.word	0x20000004
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012e4:	f7ff fb08 	bl	80008f8 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b64      	cmp	r3, #100	; 0x64
 80012f0:	d907      	bls.n	8001302 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012f2:	4b9f      	ldr	r3, [pc, #636]	; (8001570 <HAL_RCC_OscConfig+0x53c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d101      	bne.n	8001302 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e372      	b.n	80019e8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001302:	4b9b      	ldr	r3, [pc, #620]	; (8001570 <HAL_RCC_OscConfig+0x53c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0ea      	beq.n	80012e4 <HAL_RCC_OscConfig+0x2b0>
 800130e:	e01a      	b.n	8001346 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001310:	f7ff faf2 	bl	80008f8 <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001316:	e00e      	b.n	8001336 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001318:	f7ff faee 	bl	80008f8 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b64      	cmp	r3, #100	; 0x64
 8001324:	d907      	bls.n	8001336 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001326:	4b92      	ldr	r3, [pc, #584]	; (8001570 <HAL_RCC_OscConfig+0x53c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e358      	b.n	80019e8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001336:	4b8e      	ldr	r3, [pc, #568]	; (8001570 <HAL_RCC_OscConfig+0x53c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1ea      	bne.n	8001318 <HAL_RCC_OscConfig+0x2e4>
 8001342:	e000      	b.n	8001346 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001344:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d06c      	beq.n	800142c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	2b04      	cmp	r3, #4
 8001356:	d005      	beq.n	8001364 <HAL_RCC_OscConfig+0x330>
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	2b0c      	cmp	r3, #12
 800135c:	d119      	bne.n	8001392 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	2b02      	cmp	r3, #2
 8001362:	d116      	bne.n	8001392 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001364:	4b82      	ldr	r3, [pc, #520]	; (8001570 <HAL_RCC_OscConfig+0x53c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800136c:	2b00      	cmp	r3, #0
 800136e:	d005      	beq.n	800137c <HAL_RCC_OscConfig+0x348>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d101      	bne.n	800137c <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e335      	b.n	80019e8 <HAL_RCC_OscConfig+0x9b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800137c:	4b7c      	ldr	r3, [pc, #496]	; (8001570 <HAL_RCC_OscConfig+0x53c>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	691b      	ldr	r3, [r3, #16]
 8001388:	061b      	lsls	r3, r3, #24
 800138a:	4979      	ldr	r1, [pc, #484]	; (8001570 <HAL_RCC_OscConfig+0x53c>)
 800138c:	4313      	orrs	r3, r2
 800138e:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001390:	e04c      	b.n	800142c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d029      	beq.n	80013ee <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800139a:	4b75      	ldr	r3, [pc, #468]	; (8001570 <HAL_RCC_OscConfig+0x53c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a74      	ldr	r2, [pc, #464]	; (8001570 <HAL_RCC_OscConfig+0x53c>)
 80013a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a6:	f7ff faa7 	bl	80008f8 <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013ac:	e00e      	b.n	80013cc <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ae:	f7ff faa3 	bl	80008f8 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d907      	bls.n	80013cc <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013bc:	4b6c      	ldr	r3, [pc, #432]	; (8001570 <HAL_RCC_OscConfig+0x53c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d101      	bne.n	80013cc <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e30d      	b.n	80019e8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013cc:	4b68      	ldr	r3, [pc, #416]	; (8001570 <HAL_RCC_OscConfig+0x53c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0ea      	beq.n	80013ae <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d8:	4b65      	ldr	r3, [pc, #404]	; (8001570 <HAL_RCC_OscConfig+0x53c>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	061b      	lsls	r3, r3, #24
 80013e6:	4962      	ldr	r1, [pc, #392]	; (8001570 <HAL_RCC_OscConfig+0x53c>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	604b      	str	r3, [r1, #4]
 80013ec:	e01e      	b.n	800142c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ee:	4b60      	ldr	r3, [pc, #384]	; (8001570 <HAL_RCC_OscConfig+0x53c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a5f      	ldr	r2, [pc, #380]	; (8001570 <HAL_RCC_OscConfig+0x53c>)
 80013f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fa:	f7ff fa7d 	bl	80008f8 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001400:	e00e      	b.n	8001420 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001402:	f7ff fa79 	bl	80008f8 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d907      	bls.n	8001420 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001410:	4b57      	ldr	r3, [pc, #348]	; (8001570 <HAL_RCC_OscConfig+0x53c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e2e3      	b.n	80019e8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001420:	4b53      	ldr	r3, [pc, #332]	; (8001570 <HAL_RCC_OscConfig+0x53c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1ea      	bne.n	8001402 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0308 	and.w	r3, r3, #8
 8001434:	2b00      	cmp	r3, #0
 8001436:	d05f      	beq.n	80014f8 <HAL_RCC_OscConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	695b      	ldr	r3, [r3, #20]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d038      	beq.n	80014b2 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d108      	bne.n	800145a <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8001448:	4b49      	ldr	r3, [pc, #292]	; (8001570 <HAL_RCC_OscConfig+0x53c>)
 800144a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800144e:	4a48      	ldr	r2, [pc, #288]	; (8001570 <HAL_RCC_OscConfig+0x53c>)
 8001450:	f023 0310 	bic.w	r3, r3, #16
 8001454:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001458:	e007      	b.n	800146a <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800145a:	4b45      	ldr	r3, [pc, #276]	; (8001570 <HAL_RCC_OscConfig+0x53c>)
 800145c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001460:	4a43      	ldr	r2, [pc, #268]	; (8001570 <HAL_RCC_OscConfig+0x53c>)
 8001462:	f043 0310 	orr.w	r3, r3, #16
 8001466:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800146a:	4b41      	ldr	r3, [pc, #260]	; (8001570 <HAL_RCC_OscConfig+0x53c>)
 800146c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001470:	4a3f      	ldr	r2, [pc, #252]	; (8001570 <HAL_RCC_OscConfig+0x53c>)
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800147a:	f7ff fa3d 	bl	80008f8 <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001480:	e00f      	b.n	80014a2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001482:	f7ff fa39 	bl	80008f8 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b07      	cmp	r3, #7
 800148e:	d908      	bls.n	80014a2 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001490:	4b37      	ldr	r3, [pc, #220]	; (8001570 <HAL_RCC_OscConfig+0x53c>)
 8001492:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e2a2      	b.n	80019e8 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014a2:	4b33      	ldr	r3, [pc, #204]	; (8001570 <HAL_RCC_OscConfig+0x53c>)
 80014a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d0e8      	beq.n	8001482 <HAL_RCC_OscConfig+0x44e>
 80014b0:	e022      	b.n	80014f8 <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014b2:	4b2f      	ldr	r3, [pc, #188]	; (8001570 <HAL_RCC_OscConfig+0x53c>)
 80014b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014b8:	4a2d      	ldr	r2, [pc, #180]	; (8001570 <HAL_RCC_OscConfig+0x53c>)
 80014ba:	f023 0301 	bic.w	r3, r3, #1
 80014be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c2:	f7ff fa19 	bl	80008f8 <HAL_GetTick>
 80014c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014c8:	e00f      	b.n	80014ea <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ca:	f7ff fa15 	bl	80008f8 <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b07      	cmp	r3, #7
 80014d6:	d908      	bls.n	80014ea <HAL_RCC_OscConfig+0x4b6>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014d8:	4b25      	ldr	r3, [pc, #148]	; (8001570 <HAL_RCC_OscConfig+0x53c>)
 80014da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <HAL_RCC_OscConfig+0x4b6>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e27e      	b.n	80019e8 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014ea:	4b21      	ldr	r3, [pc, #132]	; (8001570 <HAL_RCC_OscConfig+0x53c>)
 80014ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1e8      	bne.n	80014ca <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0304 	and.w	r3, r3, #4
 8001500:	2b00      	cmp	r3, #0
 8001502:	f000 8131 	beq.w	8001768 <HAL_RCC_OscConfig+0x734>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001506:	2300      	movs	r3, #0
 8001508:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800150a:	4b19      	ldr	r3, [pc, #100]	; (8001570 <HAL_RCC_OscConfig+0x53c>)
 800150c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d10d      	bne.n	8001532 <HAL_RCC_OscConfig+0x4fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001516:	4b16      	ldr	r3, [pc, #88]	; (8001570 <HAL_RCC_OscConfig+0x53c>)
 8001518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151a:	4a15      	ldr	r2, [pc, #84]	; (8001570 <HAL_RCC_OscConfig+0x53c>)
 800151c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001520:	6593      	str	r3, [r2, #88]	; 0x58
 8001522:	4b13      	ldr	r3, [pc, #76]	; (8001570 <HAL_RCC_OscConfig+0x53c>)
 8001524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800152e:	2301      	movs	r3, #1
 8001530:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <HAL_RCC_OscConfig+0x540>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800153a:	2b00      	cmp	r3, #0
 800153c:	d122      	bne.n	8001584 <HAL_RCC_OscConfig+0x550>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800153e:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <HAL_RCC_OscConfig+0x540>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a0c      	ldr	r2, [pc, #48]	; (8001574 <HAL_RCC_OscConfig+0x540>)
 8001544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001548:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800154a:	f7ff f9d5 	bl	80008f8 <HAL_GetTick>
 800154e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001550:	e012      	b.n	8001578 <HAL_RCC_OscConfig+0x544>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001552:	f7ff f9d1 	bl	80008f8 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d90b      	bls.n	8001578 <HAL_RCC_OscConfig+0x544>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001560:	4b04      	ldr	r3, [pc, #16]	; (8001574 <HAL_RCC_OscConfig+0x540>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001568:	2b00      	cmp	r3, #0
 800156a:	d105      	bne.n	8001578 <HAL_RCC_OscConfig+0x544>
          {
            return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e23b      	b.n	80019e8 <HAL_RCC_OscConfig+0x9b4>
 8001570:	40021000 	.word	0x40021000
 8001574:	40007000 	.word	0x40007000
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001578:	4bb8      	ldr	r3, [pc, #736]	; (800185c <HAL_RCC_OscConfig+0x828>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0e6      	beq.n	8001552 <HAL_RCC_OscConfig+0x51e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	2b00      	cmp	r3, #0
 800158e:	d01f      	beq.n	80015d0 <HAL_RCC_OscConfig+0x59c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	2b00      	cmp	r3, #0
 800159a:	d010      	beq.n	80015be <HAL_RCC_OscConfig+0x58a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800159c:	4bb0      	ldr	r3, [pc, #704]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 800159e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015a2:	4aaf      	ldr	r2, [pc, #700]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 80015a4:	f043 0304 	orr.w	r3, r3, #4
 80015a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80015ac:	4bac      	ldr	r3, [pc, #688]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 80015ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015b2:	4aab      	ldr	r2, [pc, #684]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015bc:	e018      	b.n	80015f0 <HAL_RCC_OscConfig+0x5bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80015be:	4ba8      	ldr	r3, [pc, #672]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 80015c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015c4:	4aa6      	ldr	r2, [pc, #664]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015ce:	e00f      	b.n	80015f0 <HAL_RCC_OscConfig+0x5bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80015d0:	4ba3      	ldr	r3, [pc, #652]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 80015d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015d6:	4aa2      	ldr	r2, [pc, #648]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 80015d8:	f023 0301 	bic.w	r3, r3, #1
 80015dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80015e0:	4b9f      	ldr	r3, [pc, #636]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 80015e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015e6:	4a9e      	ldr	r2, [pc, #632]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 80015e8:	f023 0304 	bic.w	r3, r3, #4
 80015ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d068      	beq.n	80016ca <HAL_RCC_OscConfig+0x696>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f8:	f7ff f97e 	bl	80008f8 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015fe:	e011      	b.n	8001624 <HAL_RCC_OscConfig+0x5f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001600:	f7ff f97a 	bl	80008f8 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	f241 3288 	movw	r2, #5000	; 0x1388
 800160e:	4293      	cmp	r3, r2
 8001610:	d908      	bls.n	8001624 <HAL_RCC_OscConfig+0x5f0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001612:	4b93      	ldr	r3, [pc, #588]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 8001614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <HAL_RCC_OscConfig+0x5f0>
          {
            return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e1e1      	b.n	80019e8 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001624:	4b8e      	ldr	r3, [pc, #568]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 8001626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0e6      	beq.n	8001600 <HAL_RCC_OscConfig+0x5cc>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800163a:	2b00      	cmp	r3, #0
 800163c:	d022      	beq.n	8001684 <HAL_RCC_OscConfig+0x650>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800163e:	4b88      	ldr	r3, [pc, #544]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 8001640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001644:	4a86      	ldr	r2, [pc, #536]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 8001646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800164a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800164e:	e011      	b.n	8001674 <HAL_RCC_OscConfig+0x640>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001650:	f7ff f952 	bl	80008f8 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	f241 3288 	movw	r2, #5000	; 0x1388
 800165e:	4293      	cmp	r3, r2
 8001660:	d908      	bls.n	8001674 <HAL_RCC_OscConfig+0x640>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001662:	4b7f      	ldr	r3, [pc, #508]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 8001664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001668:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800166c:	2b00      	cmp	r3, #0
 800166e:	d101      	bne.n	8001674 <HAL_RCC_OscConfig+0x640>
            {
              return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e1b9      	b.n	80019e8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001674:	4b7a      	ldr	r3, [pc, #488]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 8001676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800167a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0e6      	beq.n	8001650 <HAL_RCC_OscConfig+0x61c>
 8001682:	e068      	b.n	8001756 <HAL_RCC_OscConfig+0x722>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001684:	4b76      	ldr	r3, [pc, #472]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 8001686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800168a:	4a75      	ldr	r2, [pc, #468]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 800168c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001690:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001694:	e011      	b.n	80016ba <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001696:	f7ff f92f 	bl	80008f8 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d908      	bls.n	80016ba <HAL_RCC_OscConfig+0x686>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80016a8:	4b6d      	ldr	r3, [pc, #436]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 80016aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <HAL_RCC_OscConfig+0x686>
            {
              return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e196      	b.n	80019e8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80016ba:	4b69      	ldr	r3, [pc, #420]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 80016bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1e6      	bne.n	8001696 <HAL_RCC_OscConfig+0x662>
 80016c8:	e045      	b.n	8001756 <HAL_RCC_OscConfig+0x722>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ca:	f7ff f915 	bl	80008f8 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016d0:	e011      	b.n	80016f6 <HAL_RCC_OscConfig+0x6c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d2:	f7ff f911 	bl	80008f8 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d908      	bls.n	80016f6 <HAL_RCC_OscConfig+0x6c2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016e4:	4b5e      	ldr	r3, [pc, #376]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 80016e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_RCC_OscConfig+0x6c2>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e178      	b.n	80019e8 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016f6:	4b5a      	ldr	r3, [pc, #360]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 80016f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1e6      	bne.n	80016d2 <HAL_RCC_OscConfig+0x69e>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001704:	4b56      	ldr	r3, [pc, #344]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 8001706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800170a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800170e:	2b00      	cmp	r3, #0
 8001710:	d021      	beq.n	8001756 <HAL_RCC_OscConfig+0x722>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001712:	4b53      	ldr	r3, [pc, #332]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 8001714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001718:	4a51      	ldr	r2, [pc, #324]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 800171a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800171e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001722:	e011      	b.n	8001748 <HAL_RCC_OscConfig+0x714>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001724:	f7ff f8e8 	bl	80008f8 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001732:	4293      	cmp	r3, r2
 8001734:	d908      	bls.n	8001748 <HAL_RCC_OscConfig+0x714>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001736:	4b4a      	ldr	r3, [pc, #296]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 8001738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800173c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <HAL_RCC_OscConfig+0x714>
            {
              return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e14f      	b.n	80019e8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001748:	4b45      	ldr	r3, [pc, #276]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 800174a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800174e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1e6      	bne.n	8001724 <HAL_RCC_OscConfig+0x6f0>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001756:	7ffb      	ldrb	r3, [r7, #31]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d105      	bne.n	8001768 <HAL_RCC_OscConfig+0x734>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800175c:	4b40      	ldr	r3, [pc, #256]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 800175e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001760:	4a3f      	ldr	r2, [pc, #252]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 8001762:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001766:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0320 	and.w	r3, r3, #32
 8001770:	2b00      	cmp	r3, #0
 8001772:	d04a      	beq.n	800180a <HAL_RCC_OscConfig+0x7d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001778:	2b00      	cmp	r3, #0
 800177a:	d023      	beq.n	80017c4 <HAL_RCC_OscConfig+0x790>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800177c:	4b38      	ldr	r3, [pc, #224]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 800177e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001782:	4a37      	ldr	r2, [pc, #220]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178c:	f7ff f8b4 	bl	80008f8 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001792:	e00f      	b.n	80017b4 <HAL_RCC_OscConfig+0x780>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001794:	f7ff f8b0 	bl	80008f8 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d908      	bls.n	80017b4 <HAL_RCC_OscConfig+0x780>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017a2:	4b2f      	ldr	r3, [pc, #188]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 80017a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d101      	bne.n	80017b4 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e119      	b.n	80019e8 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017b4:	4b2a      	ldr	r3, [pc, #168]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 80017b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d0e8      	beq.n	8001794 <HAL_RCC_OscConfig+0x760>
 80017c2:	e022      	b.n	800180a <HAL_RCC_OscConfig+0x7d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017c4:	4b26      	ldr	r3, [pc, #152]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 80017c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017ca:	4a25      	ldr	r2, [pc, #148]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 80017cc:	f023 0301 	bic.w	r3, r3, #1
 80017d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d4:	f7ff f890 	bl	80008f8 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017da:	e00f      	b.n	80017fc <HAL_RCC_OscConfig+0x7c8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017dc:	f7ff f88c 	bl	80008f8 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d908      	bls.n	80017fc <HAL_RCC_OscConfig+0x7c8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017ea:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 80017ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <HAL_RCC_OscConfig+0x7c8>
          {
            return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e0f5      	b.n	80019e8 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017fc:	4b18      	ldr	r3, [pc, #96]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 80017fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1e8      	bne.n	80017dc <HAL_RCC_OscConfig+0x7a8>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 80e9 	beq.w	80019e6 <HAL_RCC_OscConfig+0x9b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f003 030c 	and.w	r3, r3, #12
 800181c:	2b0c      	cmp	r3, #12
 800181e:	f000 80a3 	beq.w	8001968 <HAL_RCC_OscConfig+0x934>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001826:	2b02      	cmp	r3, #2
 8001828:	d16a      	bne.n	8001900 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800182a:	4b0d      	ldr	r3, [pc, #52]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a0c      	ldr	r2, [pc, #48]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 8001830:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001834:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001836:	f7ff f85f 	bl	80008f8 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800183c:	e012      	b.n	8001864 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183e:	f7ff f85b 	bl	80008f8 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d90b      	bls.n	8001864 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800184c:	4b04      	ldr	r3, [pc, #16]	; (8001860 <HAL_RCC_OscConfig+0x82c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d005      	beq.n	8001864 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e0c5      	b.n	80019e8 <HAL_RCC_OscConfig+0x9b4>
 800185c:	40007000 	.word	0x40007000
 8001860:	40021000 	.word	0x40021000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001864:	4b62      	ldr	r3, [pc, #392]	; (80019f0 <HAL_RCC_OscConfig+0x9bc>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d1e6      	bne.n	800183e <HAL_RCC_OscConfig+0x80a>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001870:	4b5f      	ldr	r3, [pc, #380]	; (80019f0 <HAL_RCC_OscConfig+0x9bc>)
 8001872:	68da      	ldr	r2, [r3, #12]
 8001874:	4b5f      	ldr	r3, [pc, #380]	; (80019f4 <HAL_RCC_OscConfig+0x9c0>)
 8001876:	4013      	ands	r3, r2
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001880:	3a01      	subs	r2, #1
 8001882:	0112      	lsls	r2, r2, #4
 8001884:	4311      	orrs	r1, r2
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800188a:	0212      	lsls	r2, r2, #8
 800188c:	4311      	orrs	r1, r2
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001892:	0852      	lsrs	r2, r2, #1
 8001894:	3a01      	subs	r2, #1
 8001896:	0552      	lsls	r2, r2, #21
 8001898:	4311      	orrs	r1, r2
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800189e:	0852      	lsrs	r2, r2, #1
 80018a0:	3a01      	subs	r2, #1
 80018a2:	0652      	lsls	r2, r2, #25
 80018a4:	4311      	orrs	r1, r2
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80018aa:	06d2      	lsls	r2, r2, #27
 80018ac:	430a      	orrs	r2, r1
 80018ae:	4950      	ldr	r1, [pc, #320]	; (80019f0 <HAL_RCC_OscConfig+0x9bc>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018b4:	4b4e      	ldr	r3, [pc, #312]	; (80019f0 <HAL_RCC_OscConfig+0x9bc>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a4d      	ldr	r2, [pc, #308]	; (80019f0 <HAL_RCC_OscConfig+0x9bc>)
 80018ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018be:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018c0:	4b4b      	ldr	r3, [pc, #300]	; (80019f0 <HAL_RCC_OscConfig+0x9bc>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	4a4a      	ldr	r2, [pc, #296]	; (80019f0 <HAL_RCC_OscConfig+0x9bc>)
 80018c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018cc:	f7ff f814 	bl	80008f8 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018d2:	e00e      	b.n	80018f2 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d4:	f7ff f810 	bl	80008f8 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d907      	bls.n	80018f2 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018e2:	4b43      	ldr	r3, [pc, #268]	; (80019f0 <HAL_RCC_OscConfig+0x9bc>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e07a      	b.n	80019e8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018f2:	4b3f      	ldr	r3, [pc, #252]	; (80019f0 <HAL_RCC_OscConfig+0x9bc>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0ea      	beq.n	80018d4 <HAL_RCC_OscConfig+0x8a0>
 80018fe:	e072      	b.n	80019e6 <HAL_RCC_OscConfig+0x9b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001900:	4b3b      	ldr	r3, [pc, #236]	; (80019f0 <HAL_RCC_OscConfig+0x9bc>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a3a      	ldr	r2, [pc, #232]	; (80019f0 <HAL_RCC_OscConfig+0x9bc>)
 8001906:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800190a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800190c:	4b38      	ldr	r3, [pc, #224]	; (80019f0 <HAL_RCC_OscConfig+0x9bc>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d105      	bne.n	8001924 <HAL_RCC_OscConfig+0x8f0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001918:	4b35      	ldr	r3, [pc, #212]	; (80019f0 <HAL_RCC_OscConfig+0x9bc>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	4a34      	ldr	r2, [pc, #208]	; (80019f0 <HAL_RCC_OscConfig+0x9bc>)
 800191e:	f023 0303 	bic.w	r3, r3, #3
 8001922:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001924:	4b32      	ldr	r3, [pc, #200]	; (80019f0 <HAL_RCC_OscConfig+0x9bc>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	4a31      	ldr	r2, [pc, #196]	; (80019f0 <HAL_RCC_OscConfig+0x9bc>)
 800192a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800192e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001932:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001934:	f7fe ffe0 	bl	80008f8 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800193a:	e00e      	b.n	800195a <HAL_RCC_OscConfig+0x926>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800193c:	f7fe ffdc 	bl	80008f8 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d907      	bls.n	800195a <HAL_RCC_OscConfig+0x926>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800194a:	4b29      	ldr	r3, [pc, #164]	; (80019f0 <HAL_RCC_OscConfig+0x9bc>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_RCC_OscConfig+0x926>
            {
              return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e046      	b.n	80019e8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800195a:	4b25      	ldr	r3, [pc, #148]	; (80019f0 <HAL_RCC_OscConfig+0x9bc>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1ea      	bne.n	800193c <HAL_RCC_OscConfig+0x908>
 8001966:	e03e      	b.n	80019e6 <HAL_RCC_OscConfig+0x9b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196c:	2b01      	cmp	r3, #1
 800196e:	d101      	bne.n	8001974 <HAL_RCC_OscConfig+0x940>
      {
        return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e039      	b.n	80019e8 <HAL_RCC_OscConfig+0x9b4>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001974:	4b1e      	ldr	r3, [pc, #120]	; (80019f0 <HAL_RCC_OscConfig+0x9bc>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f003 0203 	and.w	r2, r3, #3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001984:	429a      	cmp	r2, r3
 8001986:	d12c      	bne.n	80019e2 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001992:	3b01      	subs	r3, #1
 8001994:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001996:	429a      	cmp	r2, r3
 8001998:	d123      	bne.n	80019e2 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a4:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d11b      	bne.n	80019e2 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b4:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d113      	bne.n	80019e2 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c4:	085b      	lsrs	r3, r3, #1
 80019c6:	3b01      	subs	r3, #1
 80019c8:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d109      	bne.n	80019e2 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d8:	085b      	lsrs	r3, r3, #1
 80019da:	3b01      	subs	r3, #1
 80019dc:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019de:	429a      	cmp	r2, r3
 80019e0:	d001      	beq.n	80019e6 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <HAL_RCC_OscConfig+0x9b4>
        }
      }
    }
  }

  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3720      	adds	r7, #32
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40021000 	.word	0x40021000
 80019f4:	019f800c 	.word	0x019f800c

080019f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d101      	bne.n	8001a10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e10d      	b.n	8001c2c <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a10:	4b88      	ldr	r3, [pc, #544]	; (8001c34 <HAL_RCC_ClockConfig+0x23c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 030f 	and.w	r3, r3, #15
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d910      	bls.n	8001a40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1e:	4b85      	ldr	r3, [pc, #532]	; (8001c34 <HAL_RCC_ClockConfig+0x23c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f023 020f 	bic.w	r2, r3, #15
 8001a26:	4983      	ldr	r1, [pc, #524]	; (8001c34 <HAL_RCC_ClockConfig+0x23c>)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2e:	4b81      	ldr	r3, [pc, #516]	; (8001c34 <HAL_RCC_ClockConfig+0x23c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d001      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e0f5      	b.n	8001c2c <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 8094 	beq.w	8001b76 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b03      	cmp	r3, #3
 8001a54:	d134      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a56:	4b78      	ldr	r3, [pc, #480]	; (8001c38 <HAL_RCC_ClockConfig+0x240>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e0e2      	b.n	8001c2c <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001a66:	f000 fa03 	bl	8001e70 <RCC_GetSysClockFreqFromPLLSource>
 8001a6a:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4a73      	ldr	r2, [pc, #460]	; (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d956      	bls.n	8001b22 <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001a74:	4b70      	ldr	r3, [pc, #448]	; (8001c38 <HAL_RCC_ClockConfig+0x240>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d10a      	bne.n	8001a96 <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a80:	4b6d      	ldr	r3, [pc, #436]	; (8001c38 <HAL_RCC_ClockConfig+0x240>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a88:	4a6b      	ldr	r2, [pc, #428]	; (8001c38 <HAL_RCC_ClockConfig+0x240>)
 8001a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a8e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001a90:	2380      	movs	r3, #128	; 0x80
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	e045      	b.n	8001b22 <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d03f      	beq.n	8001b22 <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d13b      	bne.n	8001b22 <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001aaa:	4b63      	ldr	r3, [pc, #396]	; (8001c38 <HAL_RCC_ClockConfig+0x240>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ab2:	4a61      	ldr	r2, [pc, #388]	; (8001c38 <HAL_RCC_ClockConfig+0x240>)
 8001ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ab8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001aba:	2380      	movs	r3, #128	; 0x80
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	e030      	b.n	8001b22 <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d107      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ac8:	4b5b      	ldr	r3, [pc, #364]	; (8001c38 <HAL_RCC_ClockConfig+0x240>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d115      	bne.n	8001b00 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e0a9      	b.n	8001c2c <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d107      	bne.n	8001af0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ae0:	4b55      	ldr	r3, [pc, #340]	; (8001c38 <HAL_RCC_ClockConfig+0x240>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d109      	bne.n	8001b00 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e09d      	b.n	8001c2c <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af0:	4b51      	ldr	r3, [pc, #324]	; (8001c38 <HAL_RCC_ClockConfig+0x240>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e095      	b.n	8001c2c <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001b00:	f000 f8a2 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 8001b04:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	4a4c      	ldr	r2, [pc, #304]	; (8001c3c <HAL_RCC_ClockConfig+0x244>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d909      	bls.n	8001b22 <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b0e:	4b4a      	ldr	r3, [pc, #296]	; (8001c38 <HAL_RCC_ClockConfig+0x240>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b16:	4a48      	ldr	r2, [pc, #288]	; (8001c38 <HAL_RCC_ClockConfig+0x240>)
 8001b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b1c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001b1e:	2380      	movs	r3, #128	; 0x80
 8001b20:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b22:	4b45      	ldr	r3, [pc, #276]	; (8001c38 <HAL_RCC_ClockConfig+0x240>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f023 0203 	bic.w	r2, r3, #3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	4942      	ldr	r1, [pc, #264]	; (8001c38 <HAL_RCC_ClockConfig+0x240>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b34:	f7fe fee0 	bl	80008f8 <HAL_GetTick>
 8001b38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b3a:	e013      	b.n	8001b64 <HAL_RCC_ClockConfig+0x16c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b3c:	f7fe fedc 	bl	80008f8 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d90a      	bls.n	8001b64 <HAL_RCC_ClockConfig+0x16c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4e:	4b3a      	ldr	r3, [pc, #232]	; (8001c38 <HAL_RCC_ClockConfig+0x240>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 020c 	and.w	r2, r3, #12
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d001      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x16c>
        {
          return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e063      	b.n	8001c2c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b64:	4b34      	ldr	r3, [pc, #208]	; (8001c38 <HAL_RCC_ClockConfig+0x240>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 020c 	and.w	r2, r3, #12
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d1e2      	bne.n	8001b3c <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d009      	beq.n	8001b96 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b82:	4b2d      	ldr	r3, [pc, #180]	; (8001c38 <HAL_RCC_ClockConfig+0x240>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	492a      	ldr	r1, [pc, #168]	; (8001c38 <HAL_RCC_ClockConfig+0x240>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	608b      	str	r3, [r1, #8]
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_ClockConfig+0x1b0>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	2b80      	cmp	r3, #128	; 0x80
 8001b9a:	d105      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0x1b0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001b9c:	4b26      	ldr	r3, [pc, #152]	; (8001c38 <HAL_RCC_ClockConfig+0x240>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	4a25      	ldr	r2, [pc, #148]	; (8001c38 <HAL_RCC_ClockConfig+0x240>)
 8001ba2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ba6:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ba8:	4b22      	ldr	r3, [pc, #136]	; (8001c34 <HAL_RCC_ClockConfig+0x23c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 030f 	and.w	r3, r3, #15
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d210      	bcs.n	8001bd8 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb6:	4b1f      	ldr	r3, [pc, #124]	; (8001c34 <HAL_RCC_ClockConfig+0x23c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f023 020f 	bic.w	r2, r3, #15
 8001bbe:	491d      	ldr	r1, [pc, #116]	; (8001c34 <HAL_RCC_ClockConfig+0x23c>)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc6:	4b1b      	ldr	r3, [pc, #108]	; (8001c34 <HAL_RCC_ClockConfig+0x23c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d001      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e029      	b.n	8001c2c <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d008      	beq.n	8001bf6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001be4:	4b14      	ldr	r3, [pc, #80]	; (8001c38 <HAL_RCC_ClockConfig+0x240>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	4911      	ldr	r1, [pc, #68]	; (8001c38 <HAL_RCC_ClockConfig+0x240>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0308 	and.w	r3, r3, #8
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d009      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c02:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <HAL_RCC_ClockConfig+0x240>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	4909      	ldr	r1, [pc, #36]	; (8001c38 <HAL_RCC_ClockConfig+0x240>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001c16:	f000 f8b3 	bl	8001d80 <HAL_RCC_GetHCLKFreq>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	4a08      	ldr	r2, [pc, #32]	; (8001c40 <HAL_RCC_ClockConfig+0x248>)
 8001c1e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <HAL_RCC_ClockConfig+0x24c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7fe fe17 	bl	8000858 <HAL_InitTick>
 8001c2a:	4603      	mov	r3, r0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40022000 	.word	0x40022000
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	04c4b400 	.word	0x04c4b400
 8001c40:	20000000 	.word	0x20000000
 8001c44:	20000004 	.word	0x20000004

08001c48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b089      	sub	sp, #36	; 0x24
 8001c4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
 8001c52:	2300      	movs	r3, #0
 8001c54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c56:	4b47      	ldr	r3, [pc, #284]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 030c 	and.w	r3, r3, #12
 8001c5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c60:	4b44      	ldr	r3, [pc, #272]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	f003 0303 	and.w	r3, r3, #3
 8001c68:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <HAL_RCC_GetSysClockFreq+0x34>
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	2b0c      	cmp	r3, #12
 8001c74:	d121      	bne.n	8001cba <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d11e      	bne.n	8001cba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c7c:	4b3d      	ldr	r3, [pc, #244]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0308 	and.w	r3, r3, #8
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d107      	bne.n	8001c98 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c88:	4b3a      	ldr	r3, [pc, #232]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c8e:	0a1b      	lsrs	r3, r3, #8
 8001c90:	f003 030f 	and.w	r3, r3, #15
 8001c94:	61fb      	str	r3, [r7, #28]
 8001c96:	e005      	b.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c98:	4b36      	ldr	r3, [pc, #216]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	091b      	lsrs	r3, r3, #4
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8001ca4:	4a34      	ldr	r2, [pc, #208]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x130>)
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cac:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d10d      	bne.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001cb8:	e00a      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	2b04      	cmp	r3, #4
 8001cbe:	d102      	bne.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cc0:	4b2e      	ldr	r3, [pc, #184]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x134>)
 8001cc2:	61bb      	str	r3, [r7, #24]
 8001cc4:	e004      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d101      	bne.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ccc:	4b2b      	ldr	r3, [pc, #172]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x134>)
 8001cce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	2b0c      	cmp	r3, #12
 8001cd4:	d146      	bne.n	8001d64 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001cd6:	4b27      	ldr	r3, [pc, #156]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ce0:	4b24      	ldr	r3, [pc, #144]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	091b      	lsrs	r3, r3, #4
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	3301      	adds	r3, #1
 8001cec:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d003      	beq.n	8001cfc <HAL_RCC_GetSysClockFreq+0xb4>
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	2b03      	cmp	r3, #3
 8001cf8:	d00d      	beq.n	8001d16 <HAL_RCC_GetSysClockFreq+0xce>
 8001cfa:	e019      	b.n	8001d30 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cfc:	4a1f      	ldr	r2, [pc, #124]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x134>)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d04:	4a1b      	ldr	r2, [pc, #108]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001d06:	68d2      	ldr	r2, [r2, #12]
 8001d08:	0a12      	lsrs	r2, r2, #8
 8001d0a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d0e:	fb02 f303 	mul.w	r3, r2, r3
 8001d12:	617b      	str	r3, [r7, #20]
        break;
 8001d14:	e019      	b.n	8001d4a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d16:	4a19      	ldr	r2, [pc, #100]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x134>)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1e:	4a15      	ldr	r2, [pc, #84]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001d20:	68d2      	ldr	r2, [r2, #12]
 8001d22:	0a12      	lsrs	r2, r2, #8
 8001d24:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d28:	fb02 f303 	mul.w	r3, r2, r3
 8001d2c:	617b      	str	r3, [r7, #20]
        break;
 8001d2e:	e00c      	b.n	8001d4a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d30:	69fa      	ldr	r2, [r7, #28]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d38:	4a0e      	ldr	r2, [pc, #56]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001d3a:	68d2      	ldr	r2, [r2, #12]
 8001d3c:	0a12      	lsrs	r2, r2, #8
 8001d3e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d42:	fb02 f303 	mul.w	r3, r2, r3
 8001d46:	617b      	str	r3, [r7, #20]
        break;
 8001d48:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8001d4a:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	0e5b      	lsrs	r3, r3, #25
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	3301      	adds	r3, #1
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d62:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d64:	69bb      	ldr	r3, [r7, #24]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3724      	adds	r7, #36	; 0x24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	40021000 	.word	0x40021000
 8001d78:	08001fe0 	.word	0x08001fe0
 8001d7c:	00f42400 	.word	0x00f42400

08001d80 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8001d84:	f7ff ff60 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <HAL_RCC_GetHCLKFreq+0x20>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	091b      	lsrs	r3, r3, #4
 8001d90:	f003 030f 	and.w	r3, r3, #15
 8001d94:	4903      	ldr	r1, [pc, #12]	; (8001da4 <HAL_RCC_GetHCLKFreq+0x24>)
 8001d96:	5ccb      	ldrb	r3, [r1, r3]
 8001d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40021000 	.word	0x40021000
 8001da4:	08001fd0 	.word	0x08001fd0

08001da8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001db4:	4b2c      	ldr	r3, [pc, #176]	; (8001e68 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001dc0:	f7ff f89a 	bl	8000ef8 <HAL_PWREx_GetVoltageRange>
 8001dc4:	6138      	str	r0, [r7, #16]
 8001dc6:	e014      	b.n	8001df2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001dc8:	4b27      	ldr	r3, [pc, #156]	; (8001e68 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dcc:	4a26      	ldr	r2, [pc, #152]	; (8001e68 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	6593      	str	r3, [r2, #88]	; 0x58
 8001dd4:	4b24      	ldr	r3, [pc, #144]	; (8001e68 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001de0:	f7ff f88a 	bl	8000ef8 <HAL_PWREx_GetVoltageRange>
 8001de4:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001de6:	4b20      	ldr	r3, [pc, #128]	; (8001e68 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dea:	4a1f      	ldr	r2, [pc, #124]	; (8001e68 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001dec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001df0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d003      	beq.n	8001e00 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dfe:	d10b      	bne.n	8001e18 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b80      	cmp	r3, #128	; 0x80
 8001e04:	d919      	bls.n	8001e3a <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2ba0      	cmp	r3, #160	; 0xa0
 8001e0a:	d902      	bls.n	8001e12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8001e10:	e013      	b.n	8001e3a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e12:	2301      	movs	r3, #1
 8001e14:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8001e16:	e010      	b.n	8001e3a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b80      	cmp	r3, #128	; 0x80
 8001e1c:	d902      	bls.n	8001e24 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e1e:	2303      	movs	r3, #3
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	e00a      	b.n	8001e3a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b80      	cmp	r3, #128	; 0x80
 8001e28:	d102      	bne.n	8001e30 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	e004      	b.n	8001e3a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b70      	cmp	r3, #112	; 0x70
 8001e34:	d101      	bne.n	8001e3a <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e36:	2301      	movs	r3, #1
 8001e38:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e3a:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f023 020f 	bic.w	r2, r3, #15
 8001e42:	490a      	ldr	r1, [pc, #40]	; (8001e6c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8001e4a:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d001      	beq.n	8001e5c <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e000      	b.n	8001e5e <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40022000 	.word	0x40022000

08001e70 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b087      	sub	sp, #28
 8001e74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8001e7a:	4b36      	ldr	r3, [pc, #216]	; (8001f54 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d118      	bne.n	8001eb8 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e86:	4b33      	ldr	r3, [pc, #204]	; (8001f54 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d107      	bne.n	8001ea2 <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e92:	4b30      	ldr	r3, [pc, #192]	; (8001f54 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8001e94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e98:	0a1b      	lsrs	r3, r3, #8
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	e005      	b.n	8001eae <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ea2:	4b2c      	ldr	r3, [pc, #176]	; (8001f54 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	091b      	lsrs	r3, r3, #4
 8001ea8:	f003 030f 	and.w	r3, r3, #15
 8001eac:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8001eae:	4a2a      	ldr	r2, [pc, #168]	; (8001f58 <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb6:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001eb8:	4b26      	ldr	r3, [pc, #152]	; (8001f54 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	f003 0303 	and.w	r3, r3, #3
 8001ec0:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ec2:	4b24      	ldr	r3, [pc, #144]	; (8001f54 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	091b      	lsrs	r3, r3, #4
 8001ec8:	f003 030f 	and.w	r3, r3, #15
 8001ecc:	3301      	adds	r3, #1
 8001ece:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d003      	beq.n	8001ede <RCC_GetSysClockFreqFromPLLSource+0x6e>
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2b03      	cmp	r3, #3
 8001eda:	d00d      	beq.n	8001ef8 <RCC_GetSysClockFreqFromPLLSource+0x88>
 8001edc:	e019      	b.n	8001f12 <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ede:	4a1f      	ldr	r2, [pc, #124]	; (8001f5c <RCC_GetSysClockFreqFromPLLSource+0xec>)
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee6:	4a1b      	ldr	r2, [pc, #108]	; (8001f54 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8001ee8:	68d2      	ldr	r2, [r2, #12]
 8001eea:	0a12      	lsrs	r2, r2, #8
 8001eec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ef0:	fb02 f303 	mul.w	r3, r2, r3
 8001ef4:	613b      	str	r3, [r7, #16]
      break;
 8001ef6:	e019      	b.n	8001f2c <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ef8:	4a18      	ldr	r2, [pc, #96]	; (8001f5c <RCC_GetSysClockFreqFromPLLSource+0xec>)
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f00:	4a14      	ldr	r2, [pc, #80]	; (8001f54 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8001f02:	68d2      	ldr	r2, [r2, #12]
 8001f04:	0a12      	lsrs	r2, r2, #8
 8001f06:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f0a:	fb02 f303 	mul.w	r3, r2, r3
 8001f0e:	613b      	str	r3, [r7, #16]
      break;
 8001f10:	e00c      	b.n	8001f2c <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1a:	4a0e      	ldr	r2, [pc, #56]	; (8001f54 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8001f1c:	68d2      	ldr	r2, [r2, #12]
 8001f1e:	0a12      	lsrs	r2, r2, #8
 8001f20:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f24:	fb02 f303 	mul.w	r3, r2, r3
 8001f28:	613b      	str	r3, [r7, #16]
      break;
 8001f2a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8001f2c:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	0e5b      	lsrs	r3, r3, #25
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	3301      	adds	r3, #1
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f44:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001f46:	683b      	ldr	r3, [r7, #0]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	371c      	adds	r7, #28
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	40021000 	.word	0x40021000
 8001f58:	08001fe0 	.word	0x08001fe0
 8001f5c:	00f42400 	.word	0x00f42400

08001f60 <__libc_init_array>:
 8001f60:	b570      	push	{r4, r5, r6, lr}
 8001f62:	4d0d      	ldr	r5, [pc, #52]	; (8001f98 <__libc_init_array+0x38>)
 8001f64:	2600      	movs	r6, #0
 8001f66:	4c0d      	ldr	r4, [pc, #52]	; (8001f9c <__libc_init_array+0x3c>)
 8001f68:	1b64      	subs	r4, r4, r5
 8001f6a:	10a4      	asrs	r4, r4, #2
 8001f6c:	42a6      	cmp	r6, r4
 8001f6e:	d109      	bne.n	8001f84 <__libc_init_array+0x24>
 8001f70:	4d0b      	ldr	r5, [pc, #44]	; (8001fa0 <__libc_init_array+0x40>)
 8001f72:	2600      	movs	r6, #0
 8001f74:	4c0b      	ldr	r4, [pc, #44]	; (8001fa4 <__libc_init_array+0x44>)
 8001f76:	f000 f81f 	bl	8001fb8 <_init>
 8001f7a:	1b64      	subs	r4, r4, r5
 8001f7c:	10a4      	asrs	r4, r4, #2
 8001f7e:	42a6      	cmp	r6, r4
 8001f80:	d105      	bne.n	8001f8e <__libc_init_array+0x2e>
 8001f82:	bd70      	pop	{r4, r5, r6, pc}
 8001f84:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f88:	3601      	adds	r6, #1
 8001f8a:	4798      	blx	r3
 8001f8c:	e7ee      	b.n	8001f6c <__libc_init_array+0xc>
 8001f8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f92:	3601      	adds	r6, #1
 8001f94:	4798      	blx	r3
 8001f96:	e7f2      	b.n	8001f7e <__libc_init_array+0x1e>
 8001f98:	08002020 	.word	0x08002020
 8001f9c:	08002020 	.word	0x08002020
 8001fa0:	08002020 	.word	0x08002020
 8001fa4:	08002024 	.word	0x08002024

08001fa8 <memset>:
 8001fa8:	4402      	add	r2, r0
 8001faa:	4603      	mov	r3, r0
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d100      	bne.n	8001fb2 <memset+0xa>
 8001fb0:	4770      	bx	lr
 8001fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8001fb6:	e7f9      	b.n	8001fac <memset+0x4>

08001fb8 <_init>:
 8001fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fba:	bf00      	nop
 8001fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fbe:	bc08      	pop	{r3}
 8001fc0:	469e      	mov	lr, r3
 8001fc2:	4770      	bx	lr

08001fc4 <_fini>:
 8001fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fc6:	bf00      	nop
 8001fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fca:	bc08      	pop	{r3}
 8001fcc:	469e      	mov	lr, r3
 8001fce:	4770      	bx	lr
